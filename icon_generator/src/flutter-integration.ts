import * as fs from 'fs/promises';
import * as path from 'path';
import { execSync } from 'child_process';

interface FlutterProject {
  pubspecPath: string;
  assetsPath: string;
  androidPath: string;
  iosPath: string;
  webPath: string;
}

class FlutterIntegration {
  private project: FlutterProject;

  constructor(projectPath: string = '../android_app') {
    this.project = {
      pubspecPath: path.join(projectPath, 'pubspec.yaml'),
      assetsPath: path.join(projectPath, 'assets'),
      androidPath: path.join(projectPath, 'android'),
      iosPath: path.join(projectPath, 'ios'),
      webPath: path.join(projectPath, 'web')
    };
  }

  async integrateIcons(): Promise<void> {
    console.log('üîó Integrando √≠cones com projeto Flutter...');

    // 1. Verificar se √© um projeto Flutter v√°lido
    await this.validateFlutterProject();

    // 2. Atualizar pubspec.yaml
    await this.updatePubspec();

    // 3. Criar arquivo de constantes para √≠cones
    await this.createIconConstants();

    // 4. Criar widget helper para √≠cones
    await this.createIconWidget();

    // 5. Atualizar configura√ß√µes do Android
    await this.updateAndroidConfig();

    // 6. Executar flutter pub get
    await this.runFlutterPubGet();

    console.log('‚úÖ Integra√ß√£o conclu√≠da!');
  }

  private async validateFlutterProject(): Promise<void> {
    try {
      await fs.access(this.project.pubspecPath);
      const pubspec = await fs.readFile(this.project.pubspecPath, 'utf-8');
      
      if (!pubspec.includes('flutter:')) {
        throw new Error('N√£o √© um projeto Flutter v√°lido');
      }
    } catch (error) {
      throw new Error(`Projeto Flutter n√£o encontrado: ${error}`);
    }
  }

  private async updatePubspec(): Promise<void> {
    console.log('üìù Atualizando pubspec.yaml...');

    const pubspecContent = await fs.readFile(this.project.pubspecPath, 'utf-8');
    
    // Verificar se j√° tem configura√ß√£o de assets
    if (pubspecContent.includes('assets/icons/')) {
      console.log('‚ö†Ô∏è  Assets j√° configurados no pubspec.yaml');
      return;
    }

    const assetsConfig = `
  # Bu Fala Icons
  assets:
    - assets/icons/
    - assets/icons/medical_icon.png
    - assets/icons/education_icon.png
    - assets/icons/agriculture_icon.png
    - assets/icons/wellness_icon.png
    - assets/icons/environmental_icon.png
    - assets/icons/emergency_icon.png
    - assets/icons/translate_icon.png
    - assets/icons/camera_icon.png`;

    let updatedContent = pubspecContent;

    // Procurar pela se√ß√£o flutter: e adicionar assets
    if (pubspecContent.includes('flutter:')) {
      updatedContent = pubspecContent.replace(
        /flutter:\s*\n/,
        `flutter:${assetsConfig}\n`
      );
    } else {
      updatedContent += `\nflutter:${assetsConfig}\n`;
    }

    await fs.writeFile(this.project.pubspecPath, updatedContent);
    console.log('‚úì pubspec.yaml atualizado');
  }

  private async createIconConstants(): Promise<void> {
    console.log('üéØ Criando constantes de √≠cones...');

    const constantsDir = path.join(path.dirname(this.project.pubspecPath), 'lib', 'constants');
    await fs.mkdir(constantsDir, { recursive: true });

    const iconConstants = `// Generated by Bu Fala Icon Generator
// DO NOT EDIT MANUALLY

class BuFalaIcons {
  BuFalaIcons._();

  // Feature Icons
  static const String medical = 'assets/icons/medical_icon.png';
  static const String education = 'assets/icons/education_icon.png';
  static const String agriculture = 'assets/icons/agriculture_icon.png';
  static const String wellness = 'assets/icons/wellness_icon.png';
  static const String environmental = 'assets/icons/environmental_icon.png';
  static const String emergency = 'assets/icons/emergency_icon.png';
  static const String translate = 'assets/icons/translate_icon.png';
  static const String camera = 'assets/icons/camera_icon.png';

  // All icons list
  static const List<String> allIcons = [
    medical,
    education,
    agriculture,
    wellness,
    environmental,
    emergency,
    translate,
    camera,
  ];

  // Icon names for dynamic access
  static const Map<String, String> iconMap = {
    'medical': medical,
    'education': education,
    'agriculture': agriculture,
    'wellness': wellness,
    'environmental': environmental,
    'emergency': emergency,
    'translate': translate,
    'camera': camera,
  };

  // Get icon by name
  static String? getIcon(String name) => iconMap[name];
}

// Icon sizes
class BuFalaIconSizes {
  BuFalaIconSizes._();

  static const double small = 16.0;
  static const double medium = 24.0;
  static const double large = 32.0;
  static const double extraLarge = 48.0;
}
`;

    await fs.writeFile(
      path.join(constantsDir, 'bufala_icons.dart'),
      iconConstants
    );
    console.log('‚úì Constantes de √≠cones criadas');
  }

  private async createIconWidget(): Promise<void> {
    console.log('üé® Criando widget de √≠cones...');

    const widgetsDir = path.join(path.dirname(this.project.pubspecPath), 'lib', 'widgets');
    await fs.mkdir(widgetsDir, { recursive: true });

    const iconWidget = `import 'package:flutter/material.dart';
import '../constants/bufala_icons.dart';

/// Widget customizado para √≠cones do Bu Fala
class BuFalaIcon extends StatelessWidget {
  const BuFalaIcon({
    super.key,
    required this.iconName,
    this.size = BuFalaIconSizes.medium,
    this.color,
    this.semanticLabel,
  });

  /// Nome do √≠cone (ex: 'medical', 'education')
  final String iconName;
  
  /// Tamanho do √≠cone
  final double size;
  
  /// Cor do √≠cone (opcional)
  final Color? color;
  
  /// Label para acessibilidade
  final String? semanticLabel;

  @override
  Widget build(BuildContext context) {
    final iconPath = BuFalaIcons.getIcon(iconName);
    
    if (iconPath == null) {
      // Fallback para √≠cone n√£o encontrado
      return Icon(
        Icons.help_outline,
        size: size,
        color: color ?? Theme.of(context).iconTheme.color,
        semanticLabel: semanticLabel ?? '√çcone n√£o encontrado',
      );
    }

    return Semantics(
      label: semanticLabel ?? '√çcone \$iconName',
      child: Image.asset(
        iconPath,
        width: size,
        height: size,
        color: color,
        errorBuilder: (context, error, stackTrace) {
          return Icon(
            Icons.broken_image,
            size: size,
            color: color ?? Colors.grey,
          );
        },
      ),
    );
  }
}

/// Widget para √≠cone com texto
class BuFalaIconWithLabel extends StatelessWidget {
  const BuFalaIconWithLabel({
    super.key,
    required this.iconName,
    required this.label,
    this.iconSize = BuFalaIconSizes.medium,
    this.iconColor,
    this.textStyle,
    this.spacing = 8.0,
    this.direction = Axis.vertical,
  });

  final String iconName;
  final String label;
  final double iconSize;
  final Color? iconColor;
  final TextStyle? textStyle;
  final double spacing;
  final Axis direction;

  @override
  Widget build(BuildContext context) {
    final icon = BuFalaIcon(
      iconName: iconName,
      size: iconSize,
      color: iconColor,
    );

    final text = Text(
      label,
      style: textStyle ?? Theme.of(context).textTheme.bodyMedium,
      textAlign: TextAlign.center,
    );

    if (direction == Axis.vertical) {
      return Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          icon,
          SizedBox(height: spacing),
          text,
        ],
      );
    } else {
      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          icon,
          SizedBox(width: spacing),
          text,
        ],
      );
    }
  }
}

/// Extens√£o para facilitar o uso dos √≠cones
extension BuFalaIconExtension on String {
  /// Converte string em widget de √≠cone
  Widget toBuFalaIcon({
    double size = BuFalaIconSizes.medium,
    Color? color,
    String? semanticLabel,
  }) {
    return BuFalaIcon(
      iconName: this,
      size: size,
      color: color,
      semanticLabel: semanticLabel,
    );
  }
}
`;

    await fs.writeFile(
      path.join(widgetsDir, 'bufala_icon.dart'),
      iconWidget
    );
    console.log('‚úì Widget de √≠cones criado');
  }

  private async updateAndroidConfig(): Promise<void> {
    console.log('ü§ñ Atualizando configura√ß√µes Android...');

    const androidManifestPath = path.join(
      this.project.androidPath,
      'app',
      'src',
      'main',
      'AndroidManifest.xml'
    );

    try {
      const manifest = await fs.readFile(androidManifestPath, 'utf-8');
      
      // Verificar se j√° tem o √≠cone configurado
      if (!manifest.includes('android:icon="@mipmap/ic_launcher"')) {
        console.log('‚ö†Ô∏è  Configura√ß√£o de √≠cone n√£o encontrada no AndroidManifest.xml');
        console.log('   Adicione manualmente: android:icon="@mipmap/ic_launcher"');
      } else {
        console.log('‚úì Configura√ß√£o Android j√° est√° correta');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  AndroidManifest.xml n√£o encontrado');
    }
  }

  private async runFlutterPubGet(): Promise<void> {
    console.log('üì¶ Executando flutter pub get...');

    try {
      const projectDir = path.dirname(this.project.pubspecPath);
      execSync('flutter pub get', { 
        cwd: projectDir,
        stdio: 'inherit'
      });
      console.log('‚úì Depend√™ncias atualizadas');
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro ao executar flutter pub get:', error);
      console.log('   Execute manualmente: cd android_app && flutter pub get');
    }
  }

  async generateUsageExamples(): Promise<void> {
    console.log('üìö Gerando exemplos de uso...');

    const examplesDir = path.join(path.dirname(this.project.pubspecPath), 'lib', 'examples');
    await fs.mkdir(examplesDir, { recursive: true });

    const examples = `import 'package:flutter/material.dart';
import '../constants/bufala_icons.dart';
import '../widgets/bufala_icon.dart';

/// Exemplos de uso dos √≠cones Bu Fala
class BuFalaIconExamples extends StatelessWidget {
  const BuFalaIconExamples({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Bu Fala Icons - Exemplos'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Exemplo 1: √çcones b√°sicos
            _buildSection(
              '√çcones B√°sicos',
              Wrap(
                spacing: 16,
                runSpacing: 16,
                children: BuFalaIcons.allIcons.map((iconPath) {
                  final iconName = iconPath
                      .split('/')
                      .last
                      .replaceAll('_icon.png', '');
                  return Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      BuFalaIcon(
                        iconName: iconName,
                        size: BuFalaIconSizes.large,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        iconName,
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    ],
                  );
                }).toList(),
              ),
            ),

            const SizedBox(height: 24),

            // Exemplo 2: Diferentes tamanhos
            _buildSection(
              'Diferentes Tamanhos',
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildSizeExample(context, 'Pequeno', BuFalaIconSizes.small),
                  _buildSizeExample(context, 'M√©dio', BuFalaIconSizes.medium),
                  _buildSizeExample(context, 'Grande', BuFalaIconSizes.large),
                  _buildSizeExample(context, 'Extra Grande', BuFalaIconSizes.extraLarge),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Exemplo 3: √çcones com cores
            _buildSection(
              '√çcones Coloridos',
              Wrap(
                spacing: 16,
                runSpacing: 16,
                children: const [
                  BuFalaIcon(
                    iconName: 'medical',
                    size: BuFalaIconSizes.large,
                    color: Colors.red,
                  ),
                  BuFalaIcon(
                    iconName: 'education',
                    size: BuFalaIconSizes.large,
                    color: Colors.blue,
                  ),
                  BuFalaIcon(
                    iconName: 'agriculture',
                    size: BuFalaIconSizes.large,
                    color: Colors.green,
                  ),
                  BuFalaIcon(
                    iconName: 'wellness',
                    size: BuFalaIconSizes.large,
                    color: Colors.purple,
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Exemplo 4: √çcones com texto
            _buildSection(
              '√çcones com Texto',
              Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: const [
                      BuFalaIconWithLabel(
                        iconName: 'medical',
                        label: 'Primeiros\\nSocorros',
                        iconColor: Colors.red,
                      ),
                      BuFalaIconWithLabel(
                        iconName: 'education',
                        label: 'Educa√ß√£o',
                        iconColor: Colors.blue,
                      ),
                      BuFalaIconWithLabel(
                        iconName: 'agriculture',
                        label: 'Agricultura',
                        iconColor: Colors.green,
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  const BuFalaIconWithLabel(
                    iconName: 'emergency',
                    label: 'Emerg√™ncia',
                    direction: Axis.horizontal,
                    iconColor: Colors.red,
                    iconSize: BuFalaIconSizes.large,
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Exemplo 5: Uso em bot√µes
            _buildSection(
              '√çcones em Bot√µes',
              Column(
                children: [
                  ElevatedButton.icon(
                    onPressed: () {},
                    icon: const BuFalaIcon(
                      iconName: 'emergency',
                      size: BuFalaIconSizes.medium,
                      color: Colors.white,
                    ),
                    label: const Text('Emerg√™ncia'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 8),
                  OutlinedButton.icon(
                    onPressed: () {},
                    icon: const BuFalaIcon(
                      iconName: 'translate',
                      size: BuFalaIconSizes.medium,
                    ),
                    label: const Text('Traduzir'),
                  ),
                  const SizedBox(height: 8),
                  TextButton.icon(
                    onPressed: () {},
                    icon: const BuFalaIcon(
                      iconName: 'camera',
                      size: BuFalaIconSizes.medium,
                    ),
                    label: const Text('Analisar Foto'),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Exemplo 6: Uso com extens√£o
            _buildSection(
              'Uso com Extens√£o',
              Column(
                children: [
                  'medical'.toBuFalaIcon(
                    size: BuFalaIconSizes.large,
                    color: Colors.red,
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    "Uso: 'medical'.toBuFalaIcon()",
                    style: TextStyle(
                      fontFamily: 'monospace',
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSection(String title, Widget content) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        content,
      ],
    );
  }

  Widget _buildSizeExample(BuildContext context, String label, double size) {
    return Column(
      children: [
        BuFalaIcon(
          iconName: 'medical',
          size: size,
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall,
        ),
      ],
    );
  }
}
`;

    await fs.writeFile(
      path.join(examplesDir, 'bufala_icon_examples.dart'),
      examples
    );
    console.log('‚úì Exemplos de uso criados');
  }

  async updateHomeScreen(): Promise<void> {
    console.log('üè† Atualizando HomeScreen para usar novos √≠cones...');

    const homeScreenPath = path.join(
      path.dirname(this.project.pubspecPath),
      'lib',
      'screens',
      'home_screen.dart'
    );

    try {
      const homeScreenContent = await fs.readFile(homeScreenPath, 'utf-8');
      
      // Verificar se j√° foi atualizado
      if (homeScreenContent.includes('BuFalaIcon')) {
        console.log('‚ö†Ô∏è  HomeScreen j√° foi atualizado');
        return;
      }

      // Adicionar import
      const updatedContent = homeScreenContent.replace(
        "import '../constants/app_colors.dart';",
        `import '../constants/app_colors.dart';
import '../constants/bufala_icons.dart';
import '../widgets/bufala_icon.dart';`
      );

      await fs.writeFile(homeScreenPath, updatedContent);
      console.log('‚úì HomeScreen atualizado com imports dos novos √≠cones');
      
      // Criar exemplo de uso no HomeScreen
      await this.createHomeScreenExample();
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro ao atualizar HomeScreen:', error);
    }
  }

  private async createHomeScreenExample(): Promise<void> {
    const examplePath = path.join(
      path.dirname(this.project.pubspecPath),
      'lib',
      'examples',
      'home_screen_with_bufala_icons.dart'
    );

    const homeScreenExample = `import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../constants/app_colors.dart';
import '../constants/app_strings.dart';
import '../constants/bufala_icons.dart';
import '../services/api_service.dart';
import '../widgets/bufala_icon.dart';
import '../widgets/connection_status.dart';
import '../widgets/feature_card.dart';
import '../widgets/quick_action_button.dart';

/// Exemplo de HomeScreen usando os novos √≠cones Bu Fala
class HomeScreenWithBuFalaIcons extends StatefulWidget {
  const HomeScreenWithBuFalaIcons({super.key});

  @override
  State<HomeScreenWithBuFalaIcons> createState() => _HomeScreenWithBuFalaIconsState();
}

class _HomeScreenWithBuFalaIconsState extends State<HomeScreenWithBuFalaIcons> {
  bool _isConnected = false;
  Map<String, dynamic>? _serverStatus;

  @override
  void initState() {
    super.initState();
    _checkConnection();
  }

  Future<void> _checkConnection() async {
    final apiService = context.read<ApiService>();
    final hasInternet = await apiService.hasInternetConnection();
    final serverStatus = await apiService.healthCheck();

    setState(() {
      _isConnected = hasInternet && serverStatus != null;
      _serverStatus = serverStatus;
    });
  }

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(
          title: Row(
            children: [
              const BuFalaIcon(
                iconName: 'medical',
                size: BuFalaIconSizes.medium,
                color: Colors.white,
              ),
              const SizedBox(width: 8),
              const Text(
                AppStrings.appName,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 20,
                ),
              ),
            ],
          ),
          actions: [
            ConnectionStatus(isConnected: _isConnected),
            IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: _checkConnection,
            ),
          ],
        ),
        body: RefreshIndicator(
          onRefresh: _checkConnection,
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildWelcomeHeader(),
                const SizedBox(height: 24),
                if (_serverStatus != null) _buildServerStatus(),
                const SizedBox(height: 24),
                _buildQuickActions(),
                const SizedBox(height: 24),
                _buildMainFeatures(),
                const SizedBox(height: 24),
                _buildLanguageInfo(),
                const SizedBox(height: 24),
                _buildOfflineTips(),
              ],
            ),
          ),
        ),
      );

  Widget _buildWelcomeHeader() => Container(
        width: double.infinity,
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [AppColors.primary, AppColors.primaryDark],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'üåç Bem-vindo ao Bu Fala',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'Sistema de IA para comunidades da Guin√©-Bissau',
              style: TextStyle(
                color: Colors.white70,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                const BuFalaIcon(
                  iconName: 'medical',
                  size: BuFalaIconSizes.small,
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
                const Text(
                  'Primeiros Socorros',
                  style: TextStyle(color: Colors.white, fontSize: 14),
                ),
                const SizedBox(width: 16),
                const BuFalaIcon(
                  iconName: 'education',
                  size: BuFalaIconSizes.small,
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
                const Text(
                  'Educa√ß√£o',
                  style: TextStyle(color: Colors.white, fontSize: 14),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                const BuFalaIcon(
                  iconName: 'agriculture',
                  size: BuFalaIconSizes.small,
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
                const Text(
                  'Agricultura',
                  style: TextStyle(color: Colors.white, fontSize: 14),
                ),
                const SizedBox(width: 16),
                const BuFalaIcon(
                  iconName: 'translate',
                  size: BuFalaIconSizes.small,
                  color: Colors.white,
                ),
                const SizedBox(width: 8),
                const Text(
                  'Crioulo',
                  style: TextStyle(color: Colors.white, fontSize: 14),
                ),
              ],
            ),
          ],
        ),
      );

  Widget _buildServerStatus() => Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  BuFalaIcon(
                    iconName: _isConnected ? 'medical' : 'emergency',
                    size: BuFalaIconSizes.medium,
                    color: _isConnected ? Colors.green : Colors.red,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    _isConnected ? 'Conectado ao Servidor' : 'Modo Offline',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              if (_serverStatus != null) ...[
                const SizedBox(height: 8),
                Text('Modelo: \${_serverStatus!['model'] ?? 'N/A'}'),
                Text('Status: \${_serverStatus!['status'] ?? 'N/A'}'),
                Text(
                  'Funcionalidades: \${(_serverStatus!['features'] as List?)?.join(', ') ?? 'N/A'}',
                ),
              ],
            ],
          ),
        ),
      );

  Widget _buildQuickActions() => Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‚ö° A√ß√µes R√°pidas',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: _buildQuickActionCard(
                  iconName: 'emergency',
                  label: 'Emerg√™ncia',
                  color: Colors.red,
                  onTap: () => _navigateToMedical(emergency: true),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  iconName: 'camera',
                  label: 'Analisar Foto',
                  color: Colors.blue,
                  onTap: _analyzeImage,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickActionCard(
                  iconName: 'translate',
                  label: 'Traduzir',
                  color: Colors.green,
                  onTap: _translateText,
                ),
              ),
            ],
          ),
        ],
      );

  Widget _buildQuickActionCard({
    required String iconName,
    required String label,
    required Color color,
    required VoidCallback onTap,
  }) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              BuFalaIcon(
                iconName: iconName,
                size: BuFalaIconSizes.large,
                color: color,
              ),
              const SizedBox(height: 8),
              Text(
                label,
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                  color: color,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );

  }

  Widget _buildMainFeatures() => Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üéØ Funcionalidades Principais',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          _buildFeatureCard(
            iconName: 'medical',
            title: 'Primeiros Socorros',
            description: 'Assist√™ncia m√©dica de emerg√™ncia para √°reas remotas',
            color: Colors.red,
            onTap: _navigateToMedical,
          ),
          const SizedBox(height: 12),
          _buildFeatureCard(
            iconName: 'education',
            title: 'Educa√ß√£o Revolucion√°ria',
            description: 'Experi√™ncias interativas e offline para regi√µes de baixa conectividade',
            color: Colors.blue,
            onTap: _navigateToEducation,
          ),
          const SizedBox(height: 12),
          _buildFeatureCard(
            iconName: 'agriculture',
            title: 'Agricultura',
            description: 'Prote√ß√£o de culturas e t√©cnicas agr√≠colas',
            color: Colors.green,
            onTap: _navigateToAgriculture,
          ),
          const SizedBox(height: 12),
          _buildFeatureCard(
            iconName: 'wellness',
            title: 'Wellness Coaching',
            description: 'An√°lise de voz e coaching personalizado para sa√∫de mental e bem-estar',
            color: Colors.purple,
            onTap: _navigateToWellness,
          ),
          const SizedBox(height: 12),
          _buildFeatureCard(
            iconName: 'environmental',
            title: 'Sustentabilidade Ambiental',
            description: 'Diagn√≥stico de plantas, biodiversidade, reciclagem e mais',
            color: Colors.teal,
            onTap: _navigateToEnvironmental,
          ),
        ],
      );

  Widget _buildFeatureCard({
    required String iconName,
    required String title,
    required String description,
    required Color color,
    required VoidCallback onTap,
  }) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: BuFalaIcon(
                  iconName: iconName,
                  size: BuFalaIconSizes.large,
                  color: color,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      description,
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
              Icon(
                Icons.arrow_forward_ios,
                size: 16,
                color: Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLanguageInfo() => Card(
        color: AppColors.accent.withOpacity(0.1),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const BuFalaIcon(
                    iconName: 'translate',
                    size: BuFalaIconSizes.medium,
                    color: AppColors.accent,
                  ),
                  const SizedBox(width: 8),
                  const Text(
                    'Suporte a Idiomas',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              const Text(
                '‚Ä¢ Portugu√™s (padr√£o)\\n'
                '‚Ä¢ Crioulo da Guin√©-Bissau\\n'
                '‚Ä¢ Aprendizado cont√≠nuo de idiomas locais',
                style: TextStyle(fontSize: 14),
              ),
            ],
          ),
        ),
      );

  Widget _buildOfflineTips() => Card(
        color: Colors.orange.withOpacity(0.1),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  const BuFalaIcon(
                    iconName: 'emergency',
                    size: BuFalaIconSizes.medium,
                    color: Colors.orange,
                  ),
                  const SizedBox(width: 8),
                  const Text(
                    'Uso Offline',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              const Text(
                'Mesmo sem internet, voc√™ pode:\\n'
                '‚Ä¢ Acessar informa√ß√µes b√°sicas salvas\\n'
                '‚Ä¢ Usar guias de primeiros socorros\\n'
                '‚Ä¢ Consultar materiais educativos offline',
                style: TextStyle(fontSize: 14),
              ),
            ],
          ),
        ),
      );

  // Navigation methods
  void _navigateToMedical({bool emergency = false}) {
    debugPrint('Navegando para Medical - Emergency: \$emergency');
  }

  void _navigateToEducation() {
    debugPrint('Navegando para Education');
  }

  void _navigateToAgriculture() {
    debugPrint('Navegando para Agriculture');
  }

  void _navigateToWellness() {
    debugPrint('Navegando para Wellness');
  }

  void _navigateToEnvironmental() {
    debugPrint('Navegando para Environmental');
  }

  void _analyzeImage() {
    debugPrint('Iniciando an√°lise de imagem');
  }

  void _translateText() {
    debugPrint('Iniciando tradu√ß√£o');
  }
}
`;

    await fs.writeFile(examplePath, homeScreenExample);
    console.log('‚úì Exemplo de HomeScreen com Bu Fala Icons criado');
  }

  async generateFlutterTests(): Promise<void> {
    console.log('üß™ Gerando testes Flutter...');

    const testDir = path.join(path.dirname(this.project.pubspecPath), 'test', 'widgets');
    await fs.mkdir(testDir, { recursive: true });

    const iconTests = `import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:android_app/constants/bufala_icons.dart';
import 'package:android_app/widgets/bufala_icon.dart';

void main() {
  group('BuFalaIcon Tests', () {
    testWidgets('should display icon when valid iconName is provided', (WidgetTester tester) async {
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIcon(
              iconName: 'medical',
              size: 24,
            ),
          ),
        ),
      );

      expect(find.byType(BuFalaIcon), findsOneWidget);
      expect(find.byType(Image), findsOneWidget);
    });

    testWidgets('should display fallback icon when invalid iconName is provided', (WidgetTester tester) async {
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIcon(
              iconName: 'invalid_icon',
              size: 24,
            ),
          ),
        ),
      );

      expect(find.byType(BuFalaIcon), findsOneWidget);
      expect(find.byIcon(Icons.help_outline), findsOneWidget);
    });

    testWidgets('should apply correct size', (WidgetTester tester) async {
      const testSize = 48.0;
      
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIcon(
              iconName: 'medical',
              size: testSize,
            ),
          ),
        ),
      );

      final imageWidget = tester.widget<Image>(find.byType(Image));
      expect(imageWidget.width, testSize);
      expect(imageWidget.height, testSize);
    });

    testWidgets('should apply semantic label', (WidgetTester tester) async {
      const testLabel = 'Test Medical Icon';
      
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIcon(
              iconName: 'medical',
              semanticLabel: testLabel,
            ),
          ),
        ),
      );

      expect(find.bySemanticsLabel(testLabel), findsOneWidget);
    });
  });

  group('BuFalaIconWithLabel Tests', () {
    testWidgets('should display icon and label vertically', (WidgetTester tester) async {
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIconWithLabel(
              iconName: 'medical',
              label: 'Medical',
              direction: Axis.vertical,
            ),
          ),
        ),
      );

      expect(find.byType(BuFalaIconWithLabel), findsOneWidget);
      expect(find.byType(Column), findsOneWidget);
      expect(find.text('Medical'), findsOneWidget);
    });

    testWidgets('should display icon and label horizontally', (WidgetTester tester) async {
      await tester.pumpWidget(
        const MaterialApp(
          home: Scaffold(
            body: BuFalaIconWithLabel(
              iconName: 'medical',
              label: 'Medical',
              direction: Axis.horizontal,
            ),
          ),
        ),
      );

      expect(find.byType(BuFalaIconWithLabel), findsOneWidget);
      expect(find.byType(Row), findsOneWidget);
      expect(find.text('Medical'), findsOneWidget);
    });
  });

  group('BuFalaIcons Constants Tests', () {
    test('should have all required icon paths', () {
      expect(BuFalaIcons.medical, isNotEmpty);
      expect(BuFalaIcons.education, isNotEmpty);
      expect(BuFalaIcons.agriculture, isNotEmpty);
      expect(BuFalaIcons.wellness, isNotEmpty);
      expect(BuFalaIcons.environmental, isNotEmpty);
      expect(BuFalaIcons.emergency, isNotEmpty);
      expect(BuFalaIcons.translate, isNotEmpty);
      expect(BuFalaIcons.camera, isNotEmpty);
    });

    test('should return correct icon path from getIcon method', () {
      expect(BuFalaIcons.getIcon('medical'), equals(BuFalaIcons.medical));
      expect(BuFalaIcons.getIcon('education'), equals(BuFalaIcons.education));
      expect(BuFalaIcons.getIcon('invalid'), isNull);
    });

    test('should have correct number of icons in allIcons list', () {
      expect(BuFalaIcons.allIcons.length, equals(8));
    });

    test('should have correct icon map entries', () {
      expect(BuFalaIcons.iconMap.length, equals(8));
      expect(BuFalaIcons.iconMap.containsKey('medical'), isTrue);
      expect(BuFalaIcons.iconMap.containsKey('education'), isTrue);
    });
  });

  group('BuFalaIconSizes Tests', () {
    test('should have correct size values', () {
      expect(BuFalaIconSizes.small, equals(16.0));
      expect(BuFalaIconSizes.medium, equals(24.0));
      expect(BuFalaIconSizes.large, equals(32.0));
      expect(BuFalaIconSizes.extraLarge, equals(48.0));
    });
  });

  group('BuFalaIconExtension Tests', () {
    testWidgets('should create BuFalaIcon from string extension', (WidgetTester tester) async {
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: 'medical'.toBuFalaIcon(),
          ),
        ),
      );

      expect(find.byType(BuFalaIcon), findsOneWidget);
    });

    testWidgets('should apply parameters from string extension', (WidgetTester tester) async {
      const testSize = 32.0;
      const testColor = Colors.red;
      
      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: 'medical'.toBuFalaIcon(
              size: testSize,
              color: testColor,
            ),
          ),
        ),
      );

      final buFalaIcon = tester.widget<BuFalaIcon>(find.byType(BuFalaIcon));
      expect(buFalaIcon.size, equals(testSize));
      expect(buFalaIcon.color, equals(testColor));
    });
  });
}
`;

    await fs.writeFile(path.join(testDir, 'bufala_icon_test.dart'), iconTests);
    console.log('‚úì Testes Flutter criados');
  }

  async createDocumentation(): Promise<void> {
    console.log('üìö Criando documenta√ß√£o...');

    const docsDir = path.join(path.dirname(this.project.pubspecPath), 'docs');
    await fs.mkdir(docsDir, { recursive: true });

    const documentation = `# Bu Fala Icons - Documenta√ß√£o Flutter

## üéØ Vis√£o Geral

O Bu Fala Icons √© um sistema completo de √≠cones personalizados para o aplicativo Bu Fala, oferecendo widgets Flutter otimizados e f√°ceis de usar.

## üì¶ Instala√ß√£o

Os √≠cones s√£o automaticamente integrados ao projeto Flutter atrav√©s do gerador de √≠cones.

### Depend√™ncias Adicionadas

\`\`\`yaml
flutter:
  assets:
    - assets/icons/
\`\`\`

## üé® Uso B√°sico

### Importar

\`\`\`dart
import 'package:android_app/constants/bufala_icons.dart';
import 'package:android_app/widgets/bufala_icon.dart';
\`\`\`

### Widget BuFalaIcon

\`\`\`dart
BuFalaIcon(
  iconName
: 'medical',
  size: BuFalaIconSizes.large,
  color: Colors.red,
  semanticLabel: '√çcone m√©dico',
)
\`\`\`

### Widget BuFalaIconWithLabel

\`\`\`dart
BuFalaIconWithLabel(
  iconName: 'education',
  label: 'Educa√ß√£o',
  iconColor: Colors.blue,
  direction: Axis.vertical,
)
\`\`\`

### Extens√£o de String

\`\`\`dart
'medical'.toBuFalaIcon(
  size: BuFalaIconSizes.medium,
  color: Colors.red,
)
\`\`\`

## üéØ √çcones Dispon√≠veis

| Nome | Descri√ß√£o | Uso Recomendado |
|------|-----------|-----------------|
| \`medical\` | Primeiros socorros | Funcionalidades m√©dicas |
| \`education\` | Educa√ß√£o | Conte√∫do educacional |
| \`agriculture\` | Agricultura | Funcionalidades agr√≠colas |
| \`wellness\` | Bem-estar | Coaching e sa√∫de mental |
| \`environmental\` | Meio ambiente | Sustentabilidade |
| \`emergency\` | Emerg√™ncia | Situa√ß√µes urgentes |
| \`translate\` | Tradu√ß√£o | Funcionalidades de idioma |
| \`camera\` | C√¢mera | An√°lise de imagens |

## üìè Tamanhos Predefinidos

\`\`\`dart
BuFalaIconSizes.small      // 16.0
BuFalaIconSizes.medium     // 24.0
BuFalaIconSizes.large      // 32.0
BuFalaIconSizes.extraLarge // 48.0
\`\`\`

## üé® Exemplos de Uso

### Em Bot√µes

\`\`\`dart
ElevatedButton.icon(
  onPressed: () {},
  icon: BuFalaIcon(
    iconName: 'emergency',
    size: BuFalaIconSizes.medium,
    color: Colors.white,
  ),
  label: Text('Emerg√™ncia'),
)
\`\`\`

### Em Cards

\`\`\`dart
Card(
  child: ListTile(
    leading: BuFalaIcon(
      iconName: 'medical',
      size: BuFalaIconSizes.large,
      color: Colors.red,
    ),
    title: Text('Primeiros Socorros'),
    subtitle: Text('Assist√™ncia m√©dica de emerg√™ncia'),
  ),
)
\`\`\`

### Em AppBar

\`\`\`dart
AppBar(
  title: Row(
    children: [
      BuFalaIcon(
        iconName: 'medical',
        size: BuFalaIconSizes.medium,
        color: Colors.white,
      ),
      SizedBox(width: 8),
      Text('Bu Fala'),
    ],
  ),
)
\`\`\`

## üîß Personaliza√ß√£o

### Cores Personalizadas

\`\`\`dart
BuFalaIcon(
  iconName: 'medical',
  color: Theme.of(context).primaryColor,
)
\`\`\`

### Tamanhos Personalizados

\`\`\`dart
BuFalaIcon(
  iconName: 'education',
  size: 40.0, // Tamanho customizado
)
\`\`\`

### Acessibilidade

\`\`\`dart
BuFalaIcon(
  iconName: 'emergency',
  semanticLabel: 'Bot√£o de emerg√™ncia m√©dica',
)
\`\`\`

## üß™ Testes

Execute os testes dos √≠cones:

\`\`\`bash
flutter test test/widgets/bufala_icon_test.dart
\`\`\`

## üöÄ Performance

- √çcones s√£o carregados como assets otimizados
- Fallback autom√°tico para √≠cones n√£o encontrados
- Suporte a diferentes densidades de tela
- Cache autom√°tico pelo Flutter

## üîÑ Atualiza√ß√µes

Para atualizar os √≠cones:

1. Execute o gerador de √≠cones
2. Execute \`flutter pub get\`
3. Reinicie o aplicativo

## üêõ Troubleshooting

### √çcone n√£o aparece

1. Verifique se o nome do √≠cone est√° correto
2. Confirme se o asset est√° no pubspec.yaml
3. Execute \`flutter clean && flutter pub get\`

### Erro de compila√ß√£o

1. Verifique os imports
2. Confirme se os arquivos foram gerados corretamente
3. Reinicie o IDE

## üì± Compatibilidade

- Flutter 3.0+
- Android API 21+
- iOS 11.0+
- Web (Chrome, Firefox, Safari)

## ü§ù Contribui√ß√£o

Para adicionar novos √≠cones:

1. Adicione o arquivo PNG em \`assets/icons/\`
2. Atualize \`BuFalaIcons\` em \`constants/bufala_icons.dart\`
3. Execute os testes
4. Atualize a documenta√ß√£o
`;

    await fs.writeFile(path.join(docsDir, 'BUFALA_ICONS.md'), documentation);
    console.log('‚úì Documenta√ß√£o criada');
  }

  async generateReadme(): Promise<void> {
    console.log('üìÑ Gerando README...');

    const readmePath = path.join(path.dirname(this.project.pubspecPath), 'README_BUFALA_ICONS.md');

    const readme = `# üé® Bu Fala Icons Integration

Sistema completo de √≠cones personalizados para o aplicativo Bu Fala.

## ‚ú® Caracter√≠sticas

- üéØ 8 √≠cones personalizados otimizados
- üì± Widgets Flutter prontos para uso
- üé® Suporte a cores e tamanhos personalizados
- ‚ôø Acessibilidade integrada
- üß™ Testes automatizados inclu√≠dos
- üìö Documenta√ß√£o completa

## üöÄ In√≠cio R√°pido

### 1. Usar um √≠cone b√°sico

\`\`\`dart
BuFalaIcon(
  iconName: 'medical',
  size: BuFalaIconSizes.large,
  color: Colors.red,
)
\`\`\`

### 2. √çcone com texto

\`\`\`dart
BuFalaIconWithLabel(
  iconName: 'education',
  label: 'Educa√ß√£o',
  iconColor: Colors.blue,
)
\`\`\`

### 3. Usando extens√£o

\`\`\`dart
'emergency'.toBuFalaIcon(color: Colors.red)
\`\`\`

## üì¶ √çcones Inclu√≠dos

| √çcone | Nome | Uso |
|-------|------|-----|
| üè• | \`medical\` | Primeiros socorros |
| üéì | \`education\` | Educa√ß√£o |
| üå± | \`agriculture\` | Agricultura |
| üíö | \`wellness\` | Bem-estar |
| üåç | \`environmental\` | Meio ambiente |
| üö® | \`emergency\` | Emerg√™ncia |
| üî§ | \`translate\` | Tradu√ß√£o |
| üì∑ | \`camera\` | C√¢mera |

## üìÅ Estrutura de Arquivos

\`\`\`
lib/
‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îî‚îÄ‚îÄ bufala_icons.dart      # Constantes dos √≠cones
‚îú‚îÄ‚îÄ widgets/
‚îÇ   ‚îî‚îÄ‚îÄ bufala_icon.dart       # Widgets dos √≠cones
‚îú‚îÄ‚îÄ examples/
‚îÇ   ‚îú‚îÄ‚îÄ bufala_icon_examples.dart
‚îÇ   ‚îî‚îÄ‚îÄ home_screen_with_bufala_icons.dart
‚îî‚îÄ‚îÄ docs/
    ‚îî‚îÄ‚îÄ BUFALA_ICONS.md        # Documenta√ß√£o completa

test/
‚îî‚îÄ‚îÄ widgets/
    ‚îî‚îÄ‚îÄ bufala_icon_test.dart  # Testes automatizados

assets/
‚îî‚îÄ‚îÄ icons/
    ‚îú‚îÄ‚îÄ medical_icon.png
    ‚îú‚îÄ‚îÄ education_icon.png
    ‚îú‚îÄ‚îÄ agriculture_icon.png
    ‚îú‚îÄ‚îÄ wellness_icon.png
    ‚îú‚îÄ‚îÄ environmental_icon.png
    ‚îú‚îÄ‚îÄ emergency_icon.png
    ‚îú‚îÄ‚îÄ translate_icon.png
    ‚îî‚îÄ‚îÄ camera_icon.png
\`\`\`

## üß™ Executar Testes

\`\`\`bash
flutter test test/widgets/bufala_icon_test.dart
\`\`\`

## üìö Documenta√ß√£o Completa

Veja [BUFALA_ICONS.md](docs/BUFALA_ICONS.md) para documenta√ß√£o detalhada.

## üîÑ Regenerar √çcones

\`\`\`bash
cd icon_generator
npm run integrate
\`\`\`

---

Gerado automaticamente pelo Bu Fala Icon Generator üöÄ
`;

    await fs.writeFile(readmePath, readme);
    console.log('‚úì README gerado');
  }
}

// Fun√ß√£o principal para executar a integra√ß√£o
async function runFlutterIntegration(): Promise<void> {
  try {
    const integration = new FlutterIntegration();
    
    console.log('üöÄ Iniciando integra√ß√£o Flutter...\n');
    
    await integration.integrateIcons();
    await integration.generateUsageExamples();
    await integration.updateHomeScreen();
    await integration.generateFlutterTests();
    await integration.createDocumentation();
    await integration.generateReadme();
    
    console.log('\nüéâ Integra√ß√£o Flutter conclu√≠da com sucesso!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Execute: cd android_app && flutter pub get');
    console.log('2. Execute: flutter test');
    console.log('3. Veja os exemplos em lib/examples/');
    console.log('4. Leia a documenta√ß√£o em docs/BUFALA_ICONS.md');
    
  } catch (error) {
    console.error('‚ùå Erro na integra√ß√£o Flutter:', error);
    process.exit(1);
  }
}

export { FlutterIntegration, runFlutterIntegration };

