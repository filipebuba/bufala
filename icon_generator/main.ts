#!/usr/bin/env node

import { BuFalaIconGenerator, generateBuFalaIcons } from './icon-generator.js';
import { FlutterIntegration } from './flutter-integration.js';
import { generateBuFalaStoreIcons } from './icon-generator.js';

interface CLIOptions {
  command: string;
  outputDir?: string;
  projectPath?: string;
  includeAnimated?: boolean;
  includeVariations?: boolean;
  generatePreview?: boolean;
  help?: boolean;
}

class BuFalaCLI {
  private parseArgs(args: string[]): CLIOptions {
    const options: CLIOptions = {
      command: args[0] || 'help',
      includeAnimated: true,
      includeVariations: true,
      generatePreview: true
    };

    for (let i = 1; i < args.length; i++) {
      const arg = args[i];
      
      if (arg.startsWith('--output=')) {
        options.outputDir = arg.split('=')[1];
      } else if (arg.startsWith('--project=')) {
        options.projectPath = arg.split('=')[1];
      } else if (arg === '--no-animated') {
        options.includeAnimated = false;
      } else if (arg === '--no-variations') {
        options.includeVariations = false;
      } else if (arg === '--no-preview') {
        options.generatePreview = false;
      } else if (arg === '--help' || arg === '-h') {
        options.help = true
      }
    }

    return options;
  }

  private showHelp(): void {
    console.log(`
üåç Bu Fala Icon Generator CLI

COMANDOS:
  generate        Gera todos os √≠cones b√°sicos
  generate-all    Gera √≠cones completos com varia√ß√µes
  store-icons     Gera √≠cones para lojas de aplicativos
  flutter-setup   Configura integra√ß√£o com projeto Flutter
  help           Mostra esta ajuda

OP√á√ïES:
  --output=DIR          Diret√≥rio de sa√≠da (padr√£o: ./bu_fala_icons)
  --project=PATH        Caminho do projeto Flutter (padr√£o: ../android_app)
  --no-animated         N√£o gerar √≠cones animados
  --no-variations       N√£o gerar varia√ß√µes de estilo
  --no-preview          N√£o gerar arquivos de preview
  --help, -h            Mostra esta ajuda

EXEMPLOS:
  # Gerar √≠cones b√°sicos
  npm run cli generate

  # Gerar √≠cones completos em diret√≥rio espec√≠fico
  npm run cli generate-all --output=./meus_icones

  # Gerar apenas √≠cones para lojas
  npm run cli store-icons --output=./store_assets

  # Configurar projeto Flutter
  npm run cli flutter-setup --project=../meu_projeto_flutter

  # Gerar sem anima√ß√µes e varia√ß√µes
  npm run cli generate --no-animated --no-variations

ESTRUTURA DE SA√çDA:
  üìÅ assets/
    ‚îú‚îÄ‚îÄ üìÑ app_icon.svg (√≠cone principal)
    ‚îú‚îÄ‚îÄ üìÅ icons/ (√≠cones de funcionalidades)
    ‚îú‚îÄ‚îÄ üìÅ flat_style/ (estilo flat)
    ‚îú‚îÄ‚îÄ üìÅ gradient_style/ (estilo gradient)
    ‚îú‚îÄ‚îÄ üìÅ outline_style/ (estilo outline)
    ‚îú‚îÄ‚îÄ üìÅ glass_style/ (estilo glass)
    ‚îî‚îÄ‚îÄ üìÅ animated_frames/ (frames de anima√ß√£o)
  
  üìÅ store_assets/
    ‚îú‚îÄ‚îÄ üìÅ android/ (√≠cones Android)
    ‚îú‚îÄ‚îÄ üìÅ ios/ (√≠cones iOS)
    ‚îú‚îÄ‚îÄ üìÅ web/ (√≠cones Web/PWA)
    ‚îî‚îÄ‚îÄ üìÅ windows/ (√≠cones Windows)
  
  üìÅ output/
    ‚îú‚îÄ‚îÄ üìÑ README.md (documenta√ß√£o)
    ‚îú‚îÄ‚îÄ üìÑ preview.html (preview b√°sico)
    ‚îú‚îÄ‚îÄ üìÑ expanded_preview.html (preview completo)
    ‚îî‚îÄ‚îÄ üìÑ generation_report.json (relat√≥rio)

SOBRE O BU FALA:
  Bu Fala √© um sistema de IA para comunidades da Guin√©-Bissau,
  oferecendo primeiros socorros, educa√ß√£o, agricultura e bem-estar.

SUPORTE:
  üìß suporte@bufala.app
  üåê https://docs.bufala.app
  üì± https://github.com/bufala/android_app
`);
  }

  async run(args: string[]): Promise<void> {
    const options = this.parseArgs(args);

    if (options.help || options.command === 'help') {
      this.showHelp();
      return;
    }

    console.log('üåç Bu Fala Icon Generator CLI');
    console.log('=====================================\n');

    try {
      switch (options.command) {
        case 'generate':
          await this.generateBasicIcons(options);
          break;
        
        case 'generate-all':
          await this.generateAllIcons(options);
          break;
        
        case 'store-icons':
          await this.generateStoreIcons(options);
          break;
        
        case 'flutter-setup':
          await this.setupFlutterIntegration(options);
          break;
        
        default:
          console.error(`‚ùå Comando desconhecido: ${options.command}`);
          console.log('Use "help" para ver comandos dispon√≠veis.');
          process.exit(1);
      }

      console.log('\nüéâ Opera√ß√£o conclu√≠da com sucesso!');
      
    } catch (error) {
      console.error('\nüí• Erro durante a execu√ß√£o:', error);
      process.exit(1);
    }
  }

  private async generateBasicIcons(options: CLIOptions): Promise<void> {
    console.log('üì± Gerando √≠cones b√°sicos...\n');
    
    await generateBuFalaIcons({
      outputDir: options.outputDir,
      includeAnimated: options.includeAnimated,
      includeVariations: false, // B√°sico n√£o inclui varia√ß√µes
      generatePreview: options.generatePreview
    });
  }

  private async generateAllIcons(options: CLIOptions): Promise<void> {
    console.log('üé® Gerando pacote completo de √≠cones...\n');
    
    await generateBuFalaIcons({
      outputDir: options.outputDir,
      includeAnimated: options.includeAnimated,
      includeVariations: options.includeVariations,
      generatePreview: options.generatePreview
    });
  }

  private async generateStoreIcons(options: CLIOptions): Promise<void> {
    console.log('üè™ Gerando √≠cones para lojas de aplicativos...\n');
    
    await generateBuFalaStoreIcons(options.outputDir || './store_assets');
  }

  private async setupFlutterIntegration(options: CLIOptions): Promise<void> {
    console.log('üîó Configurando integra√ß√£o com Flutter...\n');
    
    const integration = new FlutterIntegration(options.projectPath);
    
    // Primeiro gerar os √≠cones se n√£o existirem
    console.log('1Ô∏è‚É£ Verificando √≠cones...');
    try {
      await generateBuFalaIcons({
        outputDir: './temp_icons',
        includeAnimated: false,
        includeVariations: false,
        generatePreview: false
      });
      console.log('‚úì √çcones gerados');
    } catch (error) {
      console.log('‚ö†Ô∏è Usando √≠cones existentes');
    }

    // Integrar com Flutter
    console.log('2Ô∏è‚É£ Integrando com Flutter...');
    await integration.integrateIcons();
    
    // Gerar exemplos
    console.log('3Ô∏è‚É£ Gerando exemplos...');
    await integration.generateUsageExamples();
    
    console.log('‚úÖ Integra√ß√£o Flutter conclu√≠da!');
  }
}

// Fun√ß√£o principal
async function main(): Promise<void> {
  const cli = new BuFalaCLI();
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    args.push('help');
  }
  
  await cli.run(args);
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
  });
}

export { BuFalaCLI, main };
