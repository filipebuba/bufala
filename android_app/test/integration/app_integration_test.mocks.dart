// Mocks generated by Mockito 5.4.5 from annotations
// in android_app/test/integration/app_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:android_app/models/api_response.dart' as _i2;
import 'package:android_app/models/offline_learning_models.dart' as _i7;
import 'package:android_app/services/crisis_response_service.dart' as _i3;
import 'package:android_app/services/endpoints/agriculture_service.dart' as _i8;
import 'package:android_app/services/offline_learning_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ICrisisResponseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockICrisisResponseService extends _i1.Mock
    implements _i3.ICrisisResponseService {
  MockICrisisResponseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> getEmergencyInstructions(String? situation) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEmergencyInstructions,
          [situation],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getEmergencyInstructions,
            [situation],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> contactEmergencyServices(String? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #contactEmergencyServices,
          [location],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [IOfflineLearningService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOfflineLearningService extends _i1.Mock
    implements _i6.IOfflineLearningService {
  MockIOfflineLearningService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.OfflineLearningContent>> getContent(String? subject) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContent,
          [subject],
        ),
        returnValue: _i4.Future<List<_i7.OfflineLearningContent>>.value(
            <_i7.OfflineLearningContent>[]),
      ) as _i4.Future<List<_i7.OfflineLearningContent>>);

  @override
  _i4.Future<List<_i7.OfflineLearningContent>> getContentBySubject(
          String? subject) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentBySubject,
          [subject],
        ),
        returnValue: _i4.Future<List<_i7.OfflineLearningContent>>.value(
            <_i7.OfflineLearningContent>[]),
      ) as _i4.Future<List<_i7.OfflineLearningContent>>);

  @override
  _i4.Future<List<_i7.OfflineLearningContent>> getContentByLanguage(
          String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentByLanguage,
          [language],
        ),
        returnValue: _i4.Future<List<_i7.OfflineLearningContent>>.value(
            <_i7.OfflineLearningContent>[]),
      ) as _i4.Future<List<_i7.OfflineLearningContent>>);

  @override
  _i4.Future<void> saveProgress(
    String? contentId,
    double? progress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProgress,
          [
            contentId,
            progress,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<double> getProgress(String? contentId) => (super.noSuchMethod(
        Invocation.method(
          #getProgress,
          [contentId],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);
}

/// A class which mocks [IAgricultureService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAgricultureService extends _i1.Mock
    implements _i8.IAgricultureService {
  MockIAgricultureService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getAgricultureGuidance({
    required String? prompt,
    String? language = 'pt-BR',
    String? cropType = 'geral',
    String? region = 'guinea-bissau',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAgricultureGuidance,
          [],
          {
            #prompt: prompt,
            #language: language,
            #cropType: cropType,
            #region: region,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getAgricultureGuidance,
            [],
            {
              #prompt: prompt,
              #language: language,
              #cropType: cropType,
              #region: region,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getGuineaBissauTips({
    required String? prompt,
    String? cropType = 'geral',
    String? language = 'pt-BR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGuineaBissauTips,
          [],
          {
            #prompt: prompt,
            #cropType: cropType,
            #language: language,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getGuineaBissauTips,
            [],
            {
              #prompt: prompt,
              #cropType: cropType,
              #language: language,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getCropProtectionAdvice({
    required String? cropType,
    required String? problem,
    String? language = 'pt-BR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCropProtectionAdvice,
          [],
          {
            #cropType: cropType,
            #problem: problem,
            #language: language,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getCropProtectionAdvice,
            [],
            {
              #cropType: cropType,
              #problem: problem,
              #language: language,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getPlantingCalendar({
    required String? cropType,
    String? language = 'pt-BR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlantingCalendar,
          [],
          {
            #cropType: cropType,
            #language: language,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getPlantingCalendar,
            [],
            {
              #cropType: cropType,
              #language: language,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getIrrigationTechniques({
    required String? cropType,
    String? language = 'pt-BR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIrrigationTechniques,
          [],
          {
            #cropType: cropType,
            #language: language,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getIrrigationTechniques,
            [],
            {
              #cropType: cropType,
              #language: language,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);

  @override
  _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>> getOrganicFertilization({
    required String? cropType,
    String? language = 'pt-BR',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganicFertilization,
          [],
          {
            #cropType: cropType,
            #language: language,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>.value(
            _FakeApiResponse_0<_i2.AgricultureResponse>(
          this,
          Invocation.method(
            #getOrganicFertilization,
            [],
            {
              #cropType: cropType,
              #language: language,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i2.AgricultureResponse>>);
}
