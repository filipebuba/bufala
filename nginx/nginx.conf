# smartWaiter Nginx Configuration
# Otimizado para self-ordering system
# Suporte a SSL/HTTPS, cache, rate limiting e performance

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging format otimizado
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance otimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Gzip compression otimizada
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # Brotli compression (se disponível)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=docs:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=qr:10m rate=100r/s;  # Para QR codes
    limit_req_zone $binary_remote_addr zone=orders:10m rate=20r/s; # Para pedidos

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Cache zones
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=500m inactive=1d use_temp_path=off;

    # Upstream para o backend
    upstream moransa_backend {
        server host.docker.internal:5000;
        keepalive 32;
    }

    # Upstream para documentação
    # upstream moransa_docs {
    #     server docs:8080;
    #     keepalive 16;
    # }

    # Servidor HTTP (para desenvolvimento)
    server {
        listen 80;
        server_name localhost moransa.local *.moransa.gw;
        
        # Connection limiting
        limit_conn conn_limit_per_ip 20;

        # API Backend - Endpoints principais
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://moransa_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers para app mobile
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, Accept, Origin, X-Requested-With, X-CSRF-Token" always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Max-Age 86400;
                return 204;
            }
        }

        # Health check direto
        location /health {
            proxy_pass http://moransa_backend/health;
            proxy_set_header Host $host;
            access_log off;
        }

        # Página inicial - Dashboard do smartWaiter
        location / {
            return 200 '{"service":"smartWaiter API","version":"1.0.0","status":"running","endpoints":{"/api/":"Backend API","/health":"Health Check"}}';
            add_header Content-Type application/json;
            add_header Cache-Control "no-cache";
        }
    }

    # Servidor HTTPS Principal (desabilitado temporariamente)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost moransa.local *.moransa.gw;
    #     
    #     # SSL Configuration
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     ssl_session_tickets off;
    #     
    #     # HSTS (HTTP Strict Transport Security)
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #     
    #     # Security headers otimizados
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    #     add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;
    #     add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    #     
    #     # Connection limiting
    #     limit_conn conn_limit_per_ip 20;
    # 
    #     # API Backend - Endpoints principais
    #     location /api/ {
    #         limit_req zone=api burst=50 nodelay;
    #         
    #         proxy_pass http://moransa_backend/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header X-Forwarded-Host $host;
    #         proxy_set_header X-Forwarded-Port $server_port;
    #         
    #         # Timeouts otimizados
    #         proxy_connect_timeout 30s;
    #         proxy_send_timeout 300s;
    #         proxy_read_timeout 300s;
    #         proxy_buffering on;
    #         proxy_buffer_size 4k;
    #         proxy_buffers 8 4k;
    #         
    #         # Cache para endpoints específicos
    #         proxy_cache api_cache;
    #         proxy_cache_valid 200 302 5m;
    #         proxy_cache_valid 404 1m;
    #         proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    #         proxy_cache_lock on;
    #         
    #         # CORS headers para app mobile
    #         add_header Access-Control-Allow-Origin "*" always;
    #         add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    #         add_header Access-Control-Allow-Headers "Content-Type, Authorization, Accept, Origin, X-Requested-With, X-CSRF-Token" always;
    #         add_header Access-Control-Expose-Headers "X-Total-Count, X-Page-Count" always;
    #         
    #         if ($request_method = 'OPTIONS') {
    #             add_header Access-Control-Max-Age 86400;
    #             return 204;
    #         }
    #     }

    #     # QR Code endpoints (alta frequência)
    #     location /api/qr/ {
    #         limit_req zone=qr burst=200 nodelay;
    #         
    #         proxy_pass http://moransa_backend/qr/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         # Cache agressivo para QR codes
    #         proxy_cache static_cache;
    #         proxy_cache_valid 200 1h;
    #         proxy_cache_use_stale error timeout updating;
    #     }
    # 
    #     # Endpoints de pedidos (críticos)
    #     location /api/orders/ {
    #         limit_req zone=orders burst=30 nodelay;
    #         
    #         proxy_pass http://moransa_backend/orders/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         # Sem cache para pedidos
    #         proxy_cache off;
    #         add_header Cache-Control "no-cache, no-store, must-revalidate";
    #     }
    # 
    #     # Health check direto
    #     location /health {
    #         proxy_pass http://moransa_backend/health;
    #         proxy_set_header Host $host;
    #         access_log off;
    #         
    #         # Cache curto para health check
    #         proxy_cache api_cache;
    #         proxy_cache_valid 200 30s;
    #     }

    #     # Documentação Swagger (desabilitada temporariamente)
    #     # location /docs/ {
    #     #     limit_req zone=docs burst=20 nodelay;
    #     #     
    #     #     proxy_pass http://moransa_docs/;
    #     #     proxy_set_header Host $host;
    #     #     proxy_set_header X-Real-IP $remote_addr;
    #     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     #     proxy_set_header X-Forwarded-Proto $scheme;
    #     #     
    #     #     # Cache para documentação
    #     #     proxy_cache static_cache;
    #     #     proxy_cache_valid 200 1h;
    #     # }
    # 
    #     # Arquivos estáticos (imagens, CSS, JS)
    #     location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
    #         proxy_pass http://moransa_backend;
    #         proxy_set_header Host $host;
    #         
    #         # Cache longo para assets
    #         proxy_cache static_cache;
    #         proxy_cache_valid 200 1d;
    #         add_header Cache-Control "public, max-age=86400";
    #         
    #         expires 1d;
    #         add_header Vary Accept-Encoding;
    #     }
    # 
    #     # Página inicial - Dashboard do smartWaiter
    #     location / {
    #         return 200 '{"service":"smartWaiter API","version":"1.0.0","status":"running","endpoints":{"/api/":"Backend API","/docs/":"Documentation","/health":"Health Check","/api/qr/":"QR Code Service","/api/orders/":"Order Management"}}';
    #         add_header Content-Type application/json;
    #         add_header Cache-Control "no-cache";
    #     }
    # 
    #     # Status do Nginx (monitoramento)
    #     location /nginx-status {
    #         stub_status on;
    #         access_log off;
    #         allow 127.0.0.1;
    #         allow 172.25.0.0/16;
    #         allow 10.0.0.0/8;
    #         deny all;
    #     }
    #     
    #     # Métricas de cache (desabilitado temporariamente)
    #     # location /cache-status {
    #     #     proxy_cache_purge api_cache "$scheme$request_method$host$request_uri";
    #     #     allow 127.0.0.1;
    #     #     allow 172.25.0.0/16;
    #     #     deny all;
    #     # }
    # }

    # Servidor HTTPS (desabilitado temporariamente)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost moransa.local;
    #     
    #     # SSL configuration (certificados auto-assinados para desenvolvimento)
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Redirecionar para configuração HTTP
    #     location / {
    #         return 301 http://$server_name$request_uri;
    #     }
    # }
}