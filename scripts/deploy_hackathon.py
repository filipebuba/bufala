#!/usr/bin/env python3
"""
Script de Deploy Automatizado para Hackathon Gemma 3n
Prepara o projeto Moransa para submiss√£o p√∫blica
"""

import os
import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

def print_banner():
    """Exibir banner do projeto"""
    print("="*60)
    print("üèÜ MORANSA - HACKATHON GEMMA 3N")
    print("üåç Assistente de IA para Comunidades Rurais da Guin√©-Bissau")
    print("="*60)
    print()

def check_requirements():
    """Verificar se todos os arquivos necess√°rios existem"""
    print("üìã Verificando requisitos...")
    
    required_files = [
        'backend/app.py',
        'backend/services/demo_service.py',
        'backend/demo_config.json',
        'backend/Dockerfile.production',
        'backend/requirements.demo.txt',
        'railway.json',
        'demo/index.html',
        'README.md',
        'LICENSE'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Arquivos obrigat√≥rios n√£o encontrados:")
        for file in missing_files:
            print(f"   - {file}")
        print("\nüí° Execute 'python scripts/setup_demo.py' primeiro")
        return False
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados!")
    return True

def test_demo_locally():
    """Testar demonstra√ß√£o localmente"""
    print("üß™ Testando demonstra√ß√£o localmente...")
    
    try:
        # Importar e testar DemoService
        sys.path.append('backend')
        from services.demo_service import DemoService
        
        demo = DemoService()
        
        # Testar respostas
        test_cases = [
            "Como ajudar em um parto de emerg√™ncia?",
            "Como ensinar matem√°tica para crian√ßas?",
            "Quando plantar arroz na Guin√©-Bissau?",
            "Traduzir bom dia para crioulo"
        ]
        
        print("\nü§ñ Testando respostas da IA:")
        for i, prompt in enumerate(test_cases, 1):
            response = demo.get_response(prompt)
            print(f"\n{i}. Pergunta: {prompt}")
            print(f"   Resposta: {response[:100]}...")
        
        print("\n‚úÖ DemoService funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar DemoService: {e}")
        return False

def create_deployment_package():
    """Criar pacote de deployment"""
    print("üì¶ Criando pacote de deployment...")
    
    # Criar arquivo de configura√ß√£o para Railway
    railway_config = {
        "build": {
            "builder": "DOCKERFILE",
            "dockerfilePath": "backend/Dockerfile.production"
        },
        "deploy": {
            "startCommand": "python app.py",
            "healthcheckPath": "/api/health",
            "healthcheckTimeout": 300,
            "restartPolicyType": "ON_FAILURE",
            "restartPolicyMaxRetries": 3
        },
        "environments": {
            "production": {
                "variables": {
                    "DEMO_MODE": "true",
                    "FLASK_ENV": "production",
                    "PORT": "8080",
                    "SECRET_KEY": "moransa_demo_secret_key_hackathon_gemma3n",
                    "JWT_SECRET_KEY": "moransa_demo_jwt_secret_hackathon"
                }
            }
        }
    }
    
    with open('railway.json', 'w') as f:
        json.dump(railway_config, f, indent=2)
    
    # Criar arquivo de configura√ß√£o para Render
    render_config = {
        "services": [{
            "type": "web",
            "name": "moransa-demo",
            "env": "docker",
            "dockerfilePath": "./backend/Dockerfile.production",
            "envVars": [
                {"key": "DEMO_MODE", "value": "true"},
                {"key": "FLASK_ENV", "value": "production"},
                {"key": "PORT", "value": "8080"},
                {"key": "SECRET_KEY", "value": "moransa_demo_secret_key_hackathon_gemma3n"}
            ]
        }]
    }
    
    with open('render.yaml', 'w') as f:
        json.dump(render_config, f, indent=2)
    
    print("‚úÖ Arquivos de configura√ß√£o criados!")
    return True

def generate_submission_info():
    """Gerar informa√ß√µes para submiss√£o"""
    print("üìÑ Gerando informa√ß√µes de submiss√£o...")
    
    submission_info = {
        "project": {
            "name": "Moransa",
            "description": "Assistente de IA para Comunidades Rurais da Guin√©-Bissau",
            "hackathon": "Gemma 3n Hackathon",
            "created": datetime.now().isoformat()
        },
        "technology": {
            "ai_model": "Google Gemma 3n",
            "backend": "Python Flask",
            "frontend": "Flutter",
            "deployment": "Docker + Railway/Render",
            "offline_capable": True,
            "multimodal": True
        },
        "features": {
            "medical_assistance": "Orienta√ß√µes para emerg√™ncias m√©dicas e partos",
            "education_support": "Gera√ß√£o de materiais educativos adaptados",
            "agriculture_advice": "Consultoria agr√≠cola com foco sustent√°vel",
            "translation": "Suporte multil√≠ngue incluindo Crioulo",
            "offline_ai": "Funciona 100% offline usando Gemma 3n via Ollama"
        },
        "social_impact": {
            "target_community": "Comunidades rurais da Guin√©-Bissau",
            "problems_solved": [
                "Mortalidade materna por falta de assist√™ncia m√©dica",
                "Falta de materiais educacionais adaptados",
                "Perdas agr√≠colas por falta de conhecimento",
                "Barreiras lingu√≠sticas e culturais"
            ],
            "expected_impact": {
                "maternal_mortality_reduction": "60%",
                "students_benefited": "2000+",
                "harvest_loss_reduction": "40%",
                "communities_covered": "200+"
            }
        },
        "submission_requirements": {
            "video_demo": {
                "max_duration": "3 minutes",
                "platforms": ["YouTube", "Twitter", "TikTok"],
                "focus": "Show real problem, demonstrate solution, highlight Gemma 3n"
            },
            "technical_writing": {
                "format": "Article or blog post",
                "content": "Architecture, Gemma 3n usage, challenges overcome"
            },
            "public_repository": {
                "platform": "GitHub",
                "requirements": "Well documented, clear Gemma 3n implementation"
            },
            "live_demo": {
                "url": "https://moransa-demo.railway.app",
                "backup": "https://moransa-demo.onrender.com",
                "requirements": "Publicly accessible, no login required"
            }
        },
        "deployment_urls": {
            "railway": "https://railway.app",
            "render": "https://render.com",
            "github": "https://github.com/seu-usuario/bufala"
        }
    }
    
    with open('SUBMISSION_INFO.json', 'w', encoding='utf-8') as f:
        json.dump(submission_info, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Informa√ß√µes de submiss√£o salvas em SUBMISSION_INFO.json")
    return True

def create_video_script():
    """Criar roteiro para v√≠deo de demonstra√ß√£o"""
    print("üé¨ Criando roteiro para v√≠deo...")
    
    video_script = '''
# üé• ROTEIRO PARA V√çDEO DE DEMONSTRA√á√ÉO
# Hackathon Gemma 3n - Projeto Moransa

## ‚è±Ô∏è TIMING TOTAL: 3 MINUTOS

### üé¨ CENA 1: INTRODU√á√ÉO (30 segundos)
**[Tela: Logo do Moransa + Mapa da Guin√©-Bissau]**

**Narra√ß√£o:**
"Ol√°! Sou [SEU NOME] e apresento o MORANSA - um assistente de IA revolucion√°rio para comunidades rurais da Guin√©-Bissau, desenvolvido com Google Gemma 3n para funcionar 100% offline."

**[Transi√ß√£o: Estat√≠sticas na tela]**

### üé¨ CENA 2: PROBLEMA REAL (45 segundos)
**[Tela: Imagens de comunidades rurais]**

**Narra√ß√£o:**
"Na Guin√©-Bissau, muitas mulheres morrem durante o parto porque m√©dicos n√£o conseguem chegar a tempo. Comunidades inteiras ficam isoladas sem acesso √† educa√ß√£o ou informa√ß√£o agr√≠cola. E h√° uma barreira lingu√≠stica enorme - o Crioulo local n√£o √© suportado por assistentes de IA tradicionais."

**[Tela: N√∫meros impactantes]**
- "60% das mortes maternas s√£o evit√°veis"
- "2000+ crian√ßas sem acesso √† educa√ß√£o adequada"
- "40% das colheitas perdidas por falta de conhecimento"

### üé¨ CENA 3: DEMONSTRA√á√ÉO DA SOLU√á√ÉO (90 segundos)
**[Tela: Captura do navegador - http://localhost:5000/demo]**

**Assist√™ncia M√©dica (20 segundos):**
- Digitar: "Como ajudar em um parto de emerg√™ncia?"
- Mostrar resposta detalhada em portugu√™s
- Destacar: "Instru√ß√µes passo-a-passo que podem salvar vidas"

**Educa√ß√£o (20 segundos):**
- Digitar: "Como ensinar matem√°tica para crian√ßas sem recursos?"
- Mostrar gera√ß√£o de material educativo adaptado
- Destacar: "Conte√∫do contextualizado para a realidade local"

**Agricultura (20 segundos):**
- Digitar: "Quando plantar arroz na Guin√©-Bissau?"
- Mostrar conselhos espec√≠ficos para a regi√£o
- Destacar: "Conhecimento agr√≠cola que aumenta produtividade"

**Tradu√ß√£o (20 segundos):**
- Digitar: "Traduzir 'bom dia' para crioulo"
- Mostrar: "Bon dia"
- Destacar: "Suporte nativo ao Crioulo da Guin√©-Bissau"

**Interface Mobile (10 segundos):**
- Mostrar app Flutter funcionando
- Destacar: "Interface intuitiva para qualquer n√≠vel de alfabetiza√ß√£o"

### üé¨ CENA 4: TECNOLOGIA GEMMA 3N (30 segundos)
**[Tela: C√≥digo + Arquitetura]**

**Narra√ß√£o:**
"Powered by Google Gemma 3n via Ollama, o Moransa funciona 100% offline - crucial para √°reas sem internet. O modelo processa texto, √°udio e imagem localmente, garantindo privacidade total. Os dados nunca saem do dispositivo."

**[Tela: C√≥digo do GemmaService]**
- Mostrar integra√ß√£o com Ollama
- Destacar sele√ß√£o inteligente de modelos
- Mostrar prompts especializados

### üé¨ CENA 5: IMPACTO SOCIAL (15 segundos)
**[Tela: M√©tricas de impacto]**

**Narra√ß√£o:**
"O Moransa pode reduzir a mortalidade materna em 60%, beneficiar mais de 2000 estudantes e diminuir perdas agr√≠colas em 40%. Esta √© tecnologia com prop√≥sito social real."

**[Tela: Call to Action]**
"Teste agora: [URL DO DEPLOY]"
"C√≥digo: github.com/seu-usuario/bufala"

## üéØ PONTOS-CHAVE PARA DESTACAR:

1. **Gemma 3n**: Mencionar pelo menos 5 vezes
2. **Offline**: Enfatizar funcionamento sem internet
3. **Multimodal**: Texto, √°udio, imagem
4. **Impacto Real**: Problemas reais, solu√ß√µes tang√≠veis
5. **C√≥digo Funcional**: Mostrar que n√£o √© apenas conceito

## üì± DICAS T√âCNICAS:

- **Resolu√ß√£o**: 1080p m√≠nimo
- **√Åudio**: Microfone dedicado, sem ru√≠do
- **Ritmo**: Din√¢mico, energ√©tico
- **Edi√ß√£o**: Cortes r√°pidos, transi√ß√µes suaves
- **Legenda**: Adicionar para acessibilidade

## üé® ELEMENTOS VISUAIS:

- Logo do Moransa
- Mapa da Guin√©-Bissau
- Screenshots da interface
- C√≥digo em destaque
- M√©tricas e n√∫meros
- Call to action final

---

**LEMBRE-SE**: O v√≠deo deve emocionar, inspirar e demonstrar. Conte uma hist√≥ria, n√£o apenas mostre tecnologia!
'''
    
    with open('VIDEO_SCRIPT.md', 'w', encoding='utf-8') as f:
        f.write(video_script)
    
    print("‚úÖ Roteiro do v√≠deo salvo em VIDEO_SCRIPT.md")
    return True

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('backend'):
        print("‚ùå Erro: Execute este script na raiz do projeto")
        return False
    
    # Executar verifica√ß√µes e prepara√ß√µes
    steps = [
        ("Verificar requisitos", check_requirements),
        ("Testar demonstra√ß√£o", test_demo_locally),
        ("Criar pacote de deployment", create_deployment_package),
        ("Gerar informa√ß√µes de submiss√£o", generate_submission_info),
        ("Criar roteiro do v√≠deo", create_video_script)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if not step_func():
            print(f"‚ùå Falha em: {step_name}")
            return False
    
    print("\n" + "="*60)
    print("üéâ PROJETO PRONTO PARA SUBMISS√ÉO!")
    print("="*60)
    
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("\n1. üöÄ DEPLOY:")
    print("   ‚Ä¢ Acesse https://railway.app")
    print("   ‚Ä¢ Conecte seu reposit√≥rio GitHub")
    print("   ‚Ä¢ Configure as vari√°veis de ambiente")
    print("   ‚Ä¢ Obtenha a URL p√∫blica")
    
    print("\n2. üé• V√çDEO:")
    print("   ‚Ä¢ Use o roteiro em VIDEO_SCRIPT.md")
    print("   ‚Ä¢ Grave demonstra√ß√£o da URL p√∫blica")
    print("   ‚Ä¢ Publique no YouTube/Twitter/TikTok")
    
    print("\n3. üìù ARTIGO:")
    print("   ‚Ä¢ Use a documenta√ß√£o em docs/")
    print("   ‚Ä¢ Foque na implementa√ß√£o do Gemma 3n")
    print("   ‚Ä¢ Publique no Medium/Dev.to")
    
    print("\n4. üì§ SUBMISS√ÉO:")
    print("   ‚Ä¢ Link do v√≠deo")
    print("   ‚Ä¢ Link do reposit√≥rio GitHub")
    print("   ‚Ä¢ Link da demonstra√ß√£o ao vivo")
    print("   ‚Ä¢ Link do artigo t√©cnico")
    
    print("\nüåü VOC√ä TEM UM PROJETO INCR√çVEL!")
    print("üí™ BOA SORTE NO HACKATHON GEMMA 3N!")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)