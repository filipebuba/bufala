version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: moransa-postgres
    environment:
      - POSTGRES_DB=smartwaiter
      - POSTGRES_USER=moransa
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-moransa123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - moransa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moransa -d smartwaiter"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: moransa-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6380:6379"
    networks:
      - moransa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
  # Backend Python Flask
  backend:
    build:
      context: ./backend_novo
      dockerfile: Dockerfile
    container_name: moransa-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://moransa:${POSTGRES_PASSWORD:-moransa123}@postgres:5432/smartwaiter
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-change-in-production}
    volumes:
      - backend_cache:/root/.cache
      - backend_logs:/app/logs
    networks:
      - moransa-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Gerador de Ícones (opcional - apenas para desenvolvimento)
  icon-generator:
    image: node:18-alpine
    container_name: moransa-icon-generator
    working_dir: /app
    volumes:
      - ./icon_generator:/app
      - icon_output:/app/output
      - icon_assets:/app/store_assets
    command: sh -c "npm install && npm run generate || echo 'Icon generator ready'"
    networks:
      - moransa-network
    restart: "no"
    profiles:
      - tools

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: moransa-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - moransa-network
    restart: unless-stopped
    profiles:
      - production

  # Documentação Swagger
  docs:
    image: swaggerapi/swagger-ui
    container_name: moransa-docs
    ports:
      - "8080:8080"
    environment:
      - SWAGGER_JSON=/swagger/swagger.yaml
      - BASE_URL=/docs
    volumes:
      - ./backend/swagger.yaml:/swagger/swagger.yaml:ro
    networks:
      - moransa-network
    restart: unless-stopped
    profiles:
      - docs

volumes:
  # Backend volumes
  backend_cache:
    driver: local
  backend_logs:
    driver: local
  
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # Icon generator volumes
  icon_output:
    driver: local
  icon_assets:
    driver: local
  
  # Nginx volumes
  nginx_logs:
    driver: local

networks:
  moransa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16