"""
Servi√ßo de Acessibilidade - VoiceGuide AI
Sistema completo para defici√™ncia visual, surdo e mudo
"""

import logging
import time
from datetime import datetime
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class AccessibilityService:
    """Servi√ßo de acessibilidade usando Gemma 3n"""
    
    def __init__(self, gemma_service):
        self.gemma_service = gemma_service
        self.transcription_active = False
        self.transcription_history = []
        self.source_language = 'pt-BR'
        self.target_language = 'crioulo-gb'
        
    # ==========================================
    # FUNCIONALIDADES PARA DEFICI√äNCIA VISUAL
    # ==========================================
    
    def describe_environment(self) -> str:
        """Descrever ambiente para deficientes visuais"""
        try:
            logger.info("üëÅÔ∏è Gerando descri√ß√£o do ambiente")
            
            prompt = """Descreva o ambiente ao redor como se fosse para uma pessoa com defici√™ncia visual. 
            Inclua detalhes sobre:
            - Objetos importantes pr√≥ximos
            - Poss√≠veis obst√°culos
            - Dire√ß√µes para navega√ß√£o segura
            - Sons ambiente relevantes
            
            Seja claro, conciso e √∫til para navega√ß√£o."""
            
            description = self.gemma_service.ask_gemma(prompt, context="acessibilidade")
            
            return self._clean_response(description)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na descri√ß√£o visual: {e}")
            return "Desculpe, n√£o foi poss√≠vel descrever o ambiente no momento. Tenha cuidado ao se mover."
    
    def navigate_with_voice(self, voice_command: str) -> str:
        """Processar comando de voz para navega√ß√£o"""
        try:
            logger.info(f"üó£Ô∏è Processando comando: {voice_command}")
            
            prompt = f"""Como assistente de navega√ß√£o para pessoa com defici√™ncia visual, 
            interprete este comando de voz e forne√ßa instru√ß√µes claras e seguras:
            
            Comando: "{voice_command}"
            
            Responda com:
            - Instru√ß√µes espec√≠ficas e seguras
            - Avisos sobre poss√≠veis obst√°culos
            - Dire√ß√µes claras (esquerda, direita, frente)
            - Confirma√ß√£o do destino se necess√°rio"""
            
            response = self.gemma_service.ask_gemma(prompt, context="navegacao")
            
            return self._clean_response(response)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na navega√ß√£o por voz: {e}")
            return "Desculpe, n√£o consegui processar o comando. Repita por favor."
    
    # ==========================================
    # FUNCIONALIDADES PARA SURDO E MUDO
    # ==========================================
    
    def start_continuous_transcription(self) -> str:
        """Iniciar transcri√ß√£o cont√≠nua"""
        try:
            logger.info("üé§ Iniciando transcri√ß√£o cont√≠nua")
            self.transcription_active = True
            
            return "Transcri√ß√£o iniciada! Todas as falas ser√£o convertidas em texto em tempo real."
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar transcri√ß√£o: {e}")
            return "Erro ao iniciar transcri√ß√£o."
    
    def stop_continuous_transcription(self):
        """Parar transcri√ß√£o cont√≠nua"""
        try:
            logger.info("üõë Parando transcri√ß√£o")
            self.transcription_active = False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao parar transcri√ß√£o: {e}")
    
    def transcribe_audio(self, audio_text: str) -> Dict[str, Any]:
        """Transcrever √°udio simulado (em produ√ß√£o usaria speech-to-text)"""
        try:
            logger.info("üìù Transcrevendo √°udio")
            
            # Em produ√ß√£o, aqui usaria um modelo de speech-to-text
            # Por agora, vamos simular com processamento de texto
            
            transcription = {
                'text': audio_text,
                'confidence': 0.95,
                'timestamp': datetime.now().isoformat(),
                'language': self.source_language
            }
            
            # Adicionar ao hist√≥rico
            self.transcription_history.append(transcription)
            
            # Manter apenas √∫ltimas 100 transcri√ß√µes
            if len(self.transcription_history) > 100:
                self.transcription_history = self.transcription_history[-100:]
            
            return transcription
            
        except Exception as e:
            logger.error(f"‚ùå Erro na transcri√ß√£o: {e}")
            return {
                'text': 'Erro na transcri√ß√£o',
                'confidence': 0.0,
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }
    
    def translate_text(self, text: str, source_lang: str, target_lang: str) -> str:
        """Traduzir texto usando Gemma 3n"""
        try:
            logger.info(f"üîÑ Traduzindo: {source_lang} ‚Üí {target_lang}")
            
            # Mapear c√≥digos de idioma para nomes
            language_names = {
                'pt-BR': 'portugu√™s brasileiro',
                'crioulo-gb': 'crioulo da Guin√©-Bissau',
                'en-US': 'ingl√™s americano'
            }
            
            source_name = language_names.get(source_lang, source_lang)
            target_name = language_names.get(target_lang, target_lang)
            
            prompt = f"""Traduza o seguinte texto de {source_name} para {target_name}.
            Mantenha o significado original e use linguagem natural:
            
            Texto: "{text}"
            
            Tradu√ß√£o:"""
            
            response = self.gemma_service.ask_gemma(prompt, context="traducao")
            translated = self._clean_response(response)
            
            return translated
            
        except Exception as e:
            logger.error(f"‚ùå Erro na tradu√ß√£o: {e}")
            return text  # Retorna texto original em caso de erro
    
    def get_recent_transcriptions(self, limit: int = 10) -> List[Dict[str, Any]]:
        """Obter transcri√ß√µes recentes"""
        try:
            return self.transcription_history[-limit:]
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter transcri√ß√µes: {e}")
            return []
    
    def set_languages(self, source_lang: str, target_lang: str):
        """Configurar idiomas padr√£o"""
        try:
            self.source_language = source_lang
            self.target_language = target_lang
            logger.info(f"üåê Idiomas configurados: {source_lang} ‚Üí {target_lang}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar idiomas: {e}")
    
    # ==========================================
    # FUNCIONALIDADES GERAIS
    # ==========================================
    
    def get_status(self) -> Dict[str, Any]:
        """Status do sistema de acessibilidade"""
        try:
            return {
                'service': 'VoiceGuide AI - Acessibilidade',
                'transcription_active': self.transcription_active,
                'transcription_count': len(self.transcription_history),
                'source_language': self.source_language,
                'target_language': self.target_language,
                'gemma_initialized': self.gemma_service.is_initialized if hasattr(self.gemma_service, 'is_initialized') else True,
                'features': {
                    'visual_assistance': True,
                    'voice_navigation': True,
                    'continuous_transcription': True,
                    'real_time_translation': True,
                    'offline_processing': True
                },
                'supported_languages': [
                    'pt-BR',
                    'crioulo-gb', 
                    'en-US'
                ]
            }
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status: {e}")
            return {'error': str(e)}
    
    def _clean_response(self, response: str) -> str:
        """Limpar resposta do Gemma removendo metadados"""
        try:
            # Remover marcadores do Gemma
            if '[Docs Gemma ‚Ä¢' in response:
                response = response.split('[Docs Gemma ‚Ä¢')[0].strip()
            
            if '[Fallback Response' in response:
                response = response.split('[Fallback Response')[0].strip()
            
            return response.strip()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar resposta: {e}")
            return response
