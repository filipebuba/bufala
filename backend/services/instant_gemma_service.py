"""
Servi√ßo Gemma com Fallback Instant√¢neo
Para garantir respostas r√°pidas quando o modelo demora
"""

import os
import logging
import torch
import time
import threading
from transformers import AutoProcessor, AutoModelForImageTextToText
from config.settings import BackendConfig
from utils.fallback_responses import FallbackResponseGenerator

logger = logging.getLogger(__name__)

class InstantGemmaService:
    """Servi√ßo Gemma com fallback instant√¢neo para garantir respostas r√°pidas"""
    
    def __init__(self):
        self.processor = None
        self.model = None
        self.is_initialized = False
        self.fallback_generator = FallbackResponseGenerator()
        self.max_wait_time = 15  # M√°ximo 15 segundos de espera
        self.initialize()
    
    def initialize(self):
        """Inicializar modelo com prioridade para velocidade"""
        try:
            logger.info("‚ö° Inicializando Instant Gemma Service...")
            
            if not os.path.exists(BackendConfig.MODEL_PATH):
                logger.error(f"‚ùå Modelo n√£o encontrado: {BackendConfig.MODEL_PATH}")
                return False
            
            start_time = time.time()
            
            # Carregar apenas se n√£o demorar muito
            def load_model():
                try:
                    # Carregar processor
                    self.processor = AutoProcessor.from_pretrained(
                        BackendConfig.MODEL_PATH,
                        local_files_only=True,
                        trust_remote_code=True
                    )
                    
                    # Carregar modelo
                    self.model = AutoModelForImageTextToText.from_pretrained(
                        BackendConfig.MODEL_PATH,
                        torch_dtype="auto",
                        device_map="auto", 
                        local_files_only=True,
                        trust_remote_code=True
                    )
                    return True
                except Exception as e:
                    logger.error(f"‚ùå Erro no carregamento: {e}")
                    return False
            
            # Tentar carregar com timeout
            result = [False]
            def loader():
                result[0] = load_model()
            
            thread = threading.Thread(target=loader)
            thread.daemon = True
            thread.start()
            thread.join(timeout=30)  # M√°ximo 30s para carregar
            
            load_time = time.time() - start_time
            
            if thread.is_alive() or not result[0]:
                logger.warning(f"‚ö†Ô∏è Carregamento demorou mais que 30s ou falhou, usando apenas fallback")
                self.is_initialized = True  # Funciona apenas com fallback
                return True
            
            self.is_initialized = True
            logger.info(f"‚úÖ Instant Gemma carregado em {load_time:.2f}s!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
            self.is_initialized = True  # Sempre funciona com fallback
            return True
    
    def generate_response(self, prompt, language='pt-BR', subject='general'):
        """Gerar resposta com limite de tempo rigoroso"""
        try:
            if not self.is_initialized:
                return self._smart_fallback_response(prompt, language, subject)
            
            # Se o modelo n√£o carregou, usar fallback direto
            if not self.model or not self.processor:
                return self._smart_fallback_response(prompt, language, subject)
            
            # Tentar gera√ß√£o com timeout muito restrito
            start_time = time.time()
            result = [None]
            exception = [None]
            
            def generate():
                try:
                    formatted_prompt = self._format_prompt(prompt, language, subject)
                    
                    input_ids = self.processor(
                        text=formatted_prompt, 
                        return_tensors="pt"
                    ).to(self.model.device, dtype=self.model.dtype)
                    
                    # Configura√ß√µes muito agressivas para velocidade
                    outputs = self.model.generate(
                        **input_ids, 
                        max_new_tokens=64,      # Muito pequeno
                        min_new_tokens=10,
                        do_sample=False,        # Greedy para velocidade
                        temperature=1.0,
                        disable_compile=True
                    )
                    
                    text = self.processor.batch_decode(
                        outputs,
                        skip_special_tokens=True,
                        clean_up_tokenization_spaces=True
                    )
                    
                    result[0] = text[0]
                    
                except Exception as e:
                    exception[0] = e
            
            thread = threading.Thread(target=generate)
            thread.daemon = True
            thread.start()
            thread.join(timeout=self.max_wait_time)  # 15 segundos MAX
            
            generation_time = time.time() - start_time
            
            if thread.is_alive() or exception[0] or not result[0]:
                logger.warning(f"‚ö†Ô∏è Gera√ß√£o demorou mais que {self.max_wait_time}s ou falhou, usando fallback inteligente")
                return self._smart_fallback_response(prompt, language, subject)
            
            # Limpar resposta
            response = result[0]
            if self._format_prompt(prompt, language, subject) in response:
                response = response.replace(self._format_prompt(prompt, language, subject), "").strip()
            
            if len(response) < 10:
                return self._smart_fallback_response(prompt, language, subject)
            
            logger.info(f"‚úÖ Resposta do modelo gerada em {generation_time:.2f}s")
            return f"{response}\n\n[Gemma-3n ‚Ä¢ {generation_time:.1f}s]"
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o: {e}")
            return self._smart_fallback_response(prompt, language, subject)
    
    def _smart_fallback_response(self, prompt, language, subject):
        """Resposta inteligente e r√°pida baseada no assunto"""
        start_time = time.time()
        
        # Respostas espec√≠ficas para agricultura
        if subject == 'agriculture':
            response = self._agriculture_smart_response(prompt)
        elif subject == 'medical':
            response = self._medical_smart_response(prompt)
        elif subject == 'education':
            response = self._education_smart_response(prompt)
        else:
            response = self._general_smart_response(prompt)
        
        generation_time = time.time() - start_time
        logger.info(f"‚úÖ Resposta inteligente gerada em {generation_time:.3f}s")
        
        return f"{response}\n\n[Bu Fala AI ‚Ä¢ {generation_time:.3f}s]"
    
    def _agriculture_smart_response(self, prompt):
        """Respostas inteligentes para agricultura"""
        prompt_lower = prompt.lower()
        
        # Respostas espec√≠ficas para culturas
        if 'arroz' in prompt_lower:
            if any(word in prompt_lower for word in ['plantar', 'plantio', 'como']):
                return """**Cultivo de Arroz na Guin√©-Bissau**

üåæ **Prepara√ß√£o do Solo:**
- Escolha terrenos baixos, pr√≥ximos a fontes de √°gua
- Fa√ßa sulcos de 20-30cm de profundidade
- Adicione mat√©ria org√¢nica (esterco ou compostagem)

üíß **Irriga√ß√£o:**
- O arroz precisa de solo encharcado durante o crescimento
- Mantenha 5-10cm de √°gua nos campos
- Drene apenas na colheita

üå± **Plantio:**
- √âpoca ideal: In√≠cio das chuvas (maio-junho)
- Fa√ßa mudas em viveiros primeiro
- Transplante ap√≥s 20-30 dias

‚ö†Ô∏è **Cuidados:**
- Controle ervas daninhas manualmente
- Observe pragas como a broca do colmo
- Colha quando os gr√£os estiverem dourados (4-6 meses)"""

            elif any(word in prompt_lower for word in ['problema', 'doen√ßa', 'praga']):
                return """**Problemas Comuns no Arroz**

üêõ **Pragas:**
- **Broca do colmo**: Use controle biol√≥gico, plante variedades resistentes
- **Gafanhotos**: Coleta manual, uso de extratos de nim
- **Ratos**: Armadilhas, controle da vegeta√ß√£o ao redor

ü¶† **Doen√ßas:**
- **Queima das folhas**: Evite excesso de nitrog√™nio, melhore drenagem
- **Manchas foliares**: Use sementes tratadas, rota√ß√£o de culturas

üåæ **Defici√™ncias:**
- **Amarelamento**: Pode ser falta de nitrog√™nio ou ferro
- **Crescimento lento**: Verifique pH do solo (ideal 5.5-6.5)

üí° **Preven√ß√£o:**
- Use variedades adaptadas ao clima local
- Mantenha espa√ßamento adequado entre plantas
- Fa√ßa rota√ß√£o com leguminosas"""

        elif 'milho' in prompt_lower:
            return """**Cultivo de Milho Tradicional**

üåΩ **Prepara√ß√£o:**
- Escolha solos bem drenados e f√©rteis
- Fa√ßa sulcos de 3-5cm de profundidade
- Espa√ßamento: 80cm entre fileiras, 20cm entre plantas

üåßÔ∏è **√âpoca de Plantio:**
- In√≠cio das chuvas (maio-junho)
- Tamb√©m poss√≠vel no final das chuvas (setembro-outubro)

üå± **Cuidados:**
- Primeira sacha aos 15-20 dias
- Segunda sacha aos 35-40 dias
- Adube com esterco ou compostagem

üåæ **Colheita:**
- 3-4 meses ap√≥s plantio
- Quando espigas est√£o secas e gr√£os duros
- Seque bem antes de armazenar"""

        elif 'caju' in prompt_lower:
            return """**Cultivo de Caju**

ü•ú **Plantio:**
- √âpoca seca (novembro-mar√ßo)
- Covas de 40x40x40cm
- Espa√ßamento: 8x8m ou 10x10m

üå≥ **Cuidados:**
- Irriga√ß√£o nos primeiros 2 anos
- Poda de forma√ß√£o e limpeza
- Controle de ervas daninhas

üçé **Produ√ß√£o:**
- Inicia aos 3-4 anos
- Pico produtivo: 7-20 anos
- Colheita: mar√ßo-junho"""

        # Resposta geral para agricultura
        return """**Conselhos Agr√≠colas para a Guin√©-Bissau**

üåç **Princ√≠pios Fundamentais:**
- Trabalhe com o clima, n√£o contra ele
- Use variedades locais adaptadas
- Pratique agricultura sustent√°vel

üåßÔ∏è **√âpoca das Chuvas (maio-outubro):**
- Ideal para arroz, milho, amendoim
- Mantenha boa drenagem
- Controle eros√£o com terraceamento

‚òÄÔ∏è **√âpoca Seca (novembro-abril):**
- Cultive com irriga√ß√£o: hortali√ßas
- Prepare o solo para pr√≥xima esta√ß√£o
- Plante √°rvores frut√≠feras

üí° **Dicas Importantes:**
- Fa√ßa compostagem com restos org√¢nicos
- Use rota√ß√£o de culturas
- Consulte t√©cnicos agr√≠colas locais
- Forme grupos de produtores para compartilhar conhecimento"""
    
    def _medical_smart_response(self, prompt):
        """Respostas inteligentes para sa√∫de"""
        return """**Informa√ß√£o de Sa√∫de**

‚ö†Ô∏è **IMPORTANTE**: Esta informa√ß√£o √© apenas educativa. Sempre consulte um profissional de sa√∫de para diagn√≥stico e tratamento.

üè• **Para sua pergunta sobre sa√∫de:**
- Procure o centro de sa√∫de mais pr√≥ximo
- Em emerg√™ncias, v√° imediatamente ao hospital
- Mantenha cart√£o de vacina√ß√£o atualizado
- Pratique preven√ß√£o: higiene, alimenta√ß√£o saud√°vel, exerc√≠cios

üìû **Emerg√™ncia M√©dica**: Ligue para o servi√ßo de urg√™ncia local ou v√° ao hospital mais pr√≥ximo."""
    
    def _education_smart_response(self, prompt):
        """Respostas inteligentes para educa√ß√£o"""
        return """**Dicas de Aprendizado**

üìö **M√©todos Eficazes de Estudo:**
- Organize um cronograma de estudos
- Fa√ßa resumos e mapas mentais
- Pratique exerc√≠cios regularmente
- Estude em grupo quando poss√≠vel

üéØ **Para Aprender Melhor:**
- Encontre seu hor√°rio mais produtivo
- Use diferentes fontes de informa√ß√£o
- Ensine outros para fixar o conhecimento
- Fa√ßa pausas regulares

üí° **Recursos √öteis:**
- Biblioteca local ou comunit√°ria
- Grupos de estudo
- Professores e mentores
- Material did√°tico adaptado ao seu n√≠vel"""
    
    def _general_smart_response(self, prompt):
        """Resposta geral inteligente"""
        return """**Informa√ß√£o √ötil**

Esta √© uma resposta r√°pida para sua pergunta. Para informa√ß√µes mais espec√≠ficas e detalhadas, recomendo:

üîç **Pesquise em fontes confi√°veis:**
- Consulte especialistas da √°rea
- Use bibliotecas e centros de informa√ß√£o
- Participe de comunidades locais

üí° **Considere seu contexto:**
- Suas necessidades espec√≠ficas
- Recursos dispon√≠veis
- Condi√ß√µes locais da Guin√©-Bissau

üìû **Busque ajuda quando necess√°rio:**
- Profissionais qualificados
- Servi√ßos p√∫blicos
- Organiza√ß√µes comunit√°rias"""
    
    def _format_prompt(self, prompt, language, subject):
        """Formatar prompt de forma muito simples"""
        if subject == 'agriculture':
            return f"Agricultura: {prompt}"
        elif subject == 'medical':
            return f"Sa√∫de: {prompt}"
        elif subject == 'education':
            return f"Educa√ß√£o: {prompt}"
        else:
            return prompt
    
    def get_status(self):
        """Status do servi√ßo instant√¢neo"""
        return {
            'service_type': 'instant_gemma',
            'initialized': self.is_initialized,
            'model_loaded': self.model is not None,
            'processor_loaded': self.processor is not None,
            'max_wait_time': self.max_wait_time,
            'fallback_intelligent': True,
            'model_path': BackendConfig.MODEL_PATH,
            'optimizations': [
                'instant_fallback',
                'timeout_protection', 
                'smart_responses',
                'agriculture_specialized'
            ],
            'version': 'instant-gemma-v1'
        }
