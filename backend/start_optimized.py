#!/usr/bin/env python3
"""
Script otimizado para iniciar o Bu Fala Backend
Vers√£o com carregamento inteligente e fallbacks
"""

import sys
import os
import logging
from datetime import datetime

# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Adicionar o diret√≥rio backend ao Python path
backend_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, backend_dir)

def check_system_resources():
    """Verificar recursos do sistema antes de carregar"""
    try:
        import psutil
        memory = psutil.virtual_memory()
        available_gb = memory.available / (1024**3)
        
        logger.info(f"üíæ Mem√≥ria dispon√≠vel: {available_gb:.1f} GB")
        
        if available_gb < 4:
            logger.warning("‚ö†Ô∏è Pouca mem√≥ria dispon√≠vel. Recomendado usar modo simplificado.")
            return False
        return True
    except ImportError:
        logger.warning("‚ö†Ô∏è psutil n√£o dispon√≠vel. Continuando com carregamento padr√£o.")
        return True

def start_optimized_backend():
    """Iniciar backend com otimiza√ß√µes"""
    try:
        logger.info("üöÄ Iniciando Bu Fala Backend Otimizado")
        logger.info(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        # Verificar recursos
        has_resources = check_system_resources()
        
        if not has_resources:
            logger.info("üîÑ Iniciando em modo simplificado...")
            # Configurar para modo simplificado
            os.environ['BU_FALA_SIMPLE_MODE'] = 'true'
        
        # Importar e iniciar a aplica√ß√£o
        from app import create_app
        
        app = create_app()
        
        # Configura√ß√µes otimizadas
        host = "0.0.0.0"
        port = 5000
        debug = False  # Desabilitar debug para melhor performance
        
        logger.info(f"üåü Servidor dispon√≠vel em http://localhost:{port}")
        logger.info("üìù Endpoints principais:")
        logger.info("   ‚Ä¢ /health - Status do sistema")
        logger.info("   ‚Ä¢ /medical - Consultas m√©dicas")
        logger.info("   ‚Ä¢ /multimodal/capabilities - Capacidades multimodais")
        logger.info("   ‚Ä¢ /multimodal/test/image - Teste de imagem")
        
        # Iniciar servidor
        app.run(
            host=host,
            port=port,
            debug=debug,
            threaded=True,
            use_reloader=False  # Desabilitar reloader para estabilidade
        )
        
    except KeyboardInterrupt:
        logger.info("üõë Servidor interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal no servidor: {e}")
        logger.info("üîÑ Tentando iniciar em modo fallback...")
        start_fallback_server()
    finally:
        logger.info("üëã Bu Fala Backend finalizado")

def start_fallback_server():
    """Servidor de fallback simplificado"""
    try:
        from flask import Flask, jsonify
        from datetime import datetime
        
        app = Flask(__name__)
        
        @app.route('/health')
        def health():
            return jsonify({
                'status': 'healthy',
                'mode': 'fallback',
                'timestamp': datetime.now().isoformat(),
                'service': 'Bu Fala Backend Fallback',
                'version': '2.0.0-fallback',
                'message': 'Servidor funcionando em modo simplificado'
            })
        
        @app.route('/multimodal/capabilities')
        def capabilities():
            return jsonify({
                'success': False,
                'message': 'Funcionalidades multimodais n√£o dispon√≠veis no modo fallback',
                'available_features': ['health_check', 'basic_responses'],
                'mode': 'fallback'
            })
        
        logger.info("üîÑ Servidor fallback iniciado na porta 5000")
        app.run(host="0.0.0.0", port=5000, debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no servidor fallback: {e}")

if __name__ == "__main__":
    start_optimized_backend()
