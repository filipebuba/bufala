#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configura√ß√£o do Swagger para Moransa Backend
"""

from flasgger import Swagger

# Template do Swagger
SWAGGER_TEMPLATE = {
    "swagger": "2.0",
    "info": {
        "title": "Moransa API - Sistema Multimodal com Gemma 3n",
        "description": """API revolucion√°ria para assist√™ncia comunit√°ria em Guin√©-Bissau.
        
üåü **Recursos Principais:**
- üé≠ An√°lise multimodal avan√ßada (texto, imagem, √°udio)
- üó£Ô∏è Suporte nativo ao Crioulo da Guin√©-Bissau
- üö® Sistema de emerg√™ncias m√©dicas e primeiros socorros
- üéì Conte√∫do educacional adaptativo
- üöú Monitoramento agr√≠cola inteligente
- ü§ù Valida√ß√£o colaborativa com gamifica√ß√£o
- üß† Sele√ß√£o inteligente de modelos baseada no dispositivo
- ‚ôø Recursos de acessibilidade avan√ßados
- üì± Funcionamento offline-first
- üèÜ Sistema de ranking e badges comunit√°rios

ü§ñ **Tecnologias:**
- Gemma 3n para processamento de linguagem natural
- Ollama para execu√ß√£o local de modelos
- Sistema de cache inteligente
- An√°lise multimodal com fus√£o de dados
- Tradu√ß√£o autom√°tica preservando contexto cultural
""",
        "version": "3.0.0",
        "contact": {
            "name": "Equipe Moransa",
            "email": "contato@bufala.app",
            "url": "https://bufala.app"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "schemes": ["http", "https"],
    "consumes": ["application/json", "multipart/form-data"],
    "produces": ["application/json"],
    "tags": [
        {
            "name": "Health",
            "description": "Endpoints de verifica√ß√£o de sa√∫de do sistema"
        },
        {
            "name": "Medical",
            "description": "Assist√™ncia m√©dica, emerg√™ncias e primeiros socorros"
        },
        {
            "name": "Multimodal",
            "description": "An√°lise multimodal avan√ßada com Gemma 3n"
        },
        {
            "name": "Education",
            "description": "Conte√∫do educacional adaptativo e cultural"
        },
        {
            "name": "Agriculture",
            "description": "Monitoramento e an√°lise agr√≠cola inteligente"
        },
        {
            "name": "Translation",
            "description": "Tradu√ß√£o autom√°tica com preserva√ß√£o cultural"
        },
        {
            "name": "Accessibility",
            "description": "Recursos de acessibilidade avan√ßados"
        },
        {
            "name": "Collaborative",
            "description": "Valida√ß√£o colaborativa e gamifica√ß√£o"
        },
        {
            "name": "Model Management",
            "description": "Gerenciamento e otimiza√ß√£o de modelos de IA"
        },
        {
            "name": "Environmental",
            "description": "Monitoramento ambiental e sustentabilidade"
        }
    ]
}

# Configura√ß√£o do Swagger
SWAGGER_CONFIG = {
    "headers": [],
    "specs": [
        {
            "endpoint": 'apispec',
            "route": '/api/swagger.json',
            "rule_filter": lambda rule: True,
            "model_filter": lambda tag: True,
        }
    ],
    "static_url_path": "/flasgger_static",
    "swagger_ui": True,
    "specs_route": "/api/docs/"
}

# Schemas comuns
COMMON_SCHEMAS = {
    "ErrorResponse": {
        "type": "object",
        "properties": {
            "error": {
                "type": "string",
                "description": "Mensagem de erro"
            },
            "status": {
                "type": "string",
                "description": "Status da resposta",
                "enum": ["error", "failed"]
            },
            "code": {
                "type": "integer",
                "description": "C√≥digo de erro HTTP"
            },
            "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp do erro"
            }
        },
        "required": ["error", "status"]
    },
    "SuccessResponse": {
        "type": "object",
        "properties": {
            "message": {
                "type": "string",
                "description": "Mensagem de sucesso"
            },
            "status": {
                "type": "string",
                "description": "Status da resposta",
                "enum": ["success", "ok"]
            },
            "data": {
                "type": "object",
                "description": "Dados da resposta"
            },
            "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp da resposta"
            }
        },
        "required": ["message", "status"]
    },
    "MultimodalContent": {
        "type": "object",
        "properties": {
            "text": {
                "type": "string",
                "description": "Conte√∫do textual"
            },
            "image": {
                "type": "string",
                "format": "base64",
                "description": "Imagem em formato base64"
            },
            "audio": {
                "type": "string",
                "format": "base64",
                "description": "√Åudio em formato base64"
            }
        }
    },
    "HealthStatus": {
        "type": "object",
        "properties": {
            "status": {
                "type": "string",
                "enum": ["healthy", "degraded", "down"],
                "description": "Status do servi√ßo"
            },
            "uptime": {
                "type": "string",
                "description": "Tempo de atividade"
            },
            "version": {
                "type": "string",
                "description": "Vers√£o do servi√ßo"
            }
        }
    },
    "UserStats": {
        "type": "object",
        "properties": {
            "user_id": {
                "type": "string",
                "description": "ID do usu√°rio"
            },
            "points": {
                "type": "integer",
                "description": "Pontos acumulados"
            },
            "level": {
                "type": "string",
                "description": "N√≠vel do usu√°rio"
            },
            "badges": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Badges conquistados"
            },
            "contributions": {
                "type": "integer",
                "description": "N√∫mero de contribui√ß√µes"
            }
        }
    }
}

def setup_swagger(app):
    """
    Configura o Swagger para a aplica√ß√£o Flask
    """
    return Swagger(app, config=SWAGGER_CONFIG, template=SWAGGER_TEMPLATE)