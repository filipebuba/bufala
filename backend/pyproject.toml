[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "moransa-backend"
version = "1.0.0"
description = "Backend para aplicativo Moransa - Assistente offline para comunidades rurais"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Moransa Team", email = "nhadafilipe@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Agriculture",
]
keywords = ["healthcare", "education", "agriculture", "offline", "rural", "guinea-bissau", "crioulo"]

[project.urls]
Homepage = "https://github.com/seu-usuario/moransa"
Repository = "https://github.com/seu-usuario/moransa.git"
Documentation = "https://moransa.readthedocs.io"
"Bug Tracker" = "https://github.com/seu-usuario/moransa/issues"

# Configurações do Black (formatador de código Python)
[tool.black]
line-length = 127
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
(
  ^/migrations/     # exclude migrations
  | ^/venv/         # exclude virtual environment
  | ^/env/          # exclude virtual environment
  | ^/.env/         # exclude virtual environment
  | __pycache__     # exclude cache
  | \.git          # exclude git
  | \.pytest_cache # exclude pytest cache
  | build           # exclude build
  | dist            # exclude dist
)
'''

# Configurações do isort (organizador de imports)
[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["moransa"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "pytest",
    "requests",
    "numpy",
    "pandas",
    "scikit-learn",
    "transformers",
    "torch",
    "tensorflow"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
skip = ["migrations", "venv", "env", ".env", "__pycache__"]

# Configurações do mypy (verificador de tipos)
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Módulos a serem ignorados pelo mypy
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*",
    "*.migrations.*",
]
ignore_errors = true

# Configurações do pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: marca testes unitários",
    "integration: marca testes de integração",
    "slow: marca testes lentos",
    "api: marca testes de API",
    "medical: marca testes médicos",
    "educational: marca testes educacionais",
    "agricultural: marca testes agrícolas",
    "emergency: marca testes de emergência",
    "language: marca testes de linguagem",
    "community: marca testes comunitários",
    "security: marca testes de segurança",
    "performance: marca testes de performance",
    "offline: marca testes offline",
]

# Configurações do coverage
[tool.coverage.run]
source = ["."] 
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.env/*",
    "*/migrations/*",
    "manage.py",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
precision = 2

[tool.coverage.html]
directory = "htmlcov"
title = "Moransa Backend Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Configurações do bandit (verificador de segurança)
[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", "env", ".env"]
skips = ["B101", "B601"]  # Skip assert_used e shell_injection em testes

# Configurações do flake8 (não suporta pyproject.toml nativamente, mas documentado aqui)
# Para usar, criar .flake8 ou setup.cfg
# [flake8]
# max-line-length = 127
# extend-ignore = E203, W503, E501
# exclude = migrations,venv,env,.env,__pycache__,.git,.pytest_cache,build,dist
# max-complexity = 10
# per-file-ignores = __init__.py:F401

# Configurações específicas do Moransa
[tool.moransa]
# Configurações de módulos
modules = [
    "medical",
    "education",
    "agriculture",
    "emergency",
    "language",
    "community"
]

# Configurações de linguagens suportadas
languages = [
    "portuguese",
    "english", 
    "crioulo",
    "other_local_languages"
]

# Configurações de qualidade
quality = {
    test_coverage_minimum = 70,
    code_complexity_maximum = 10,
    line_length_maximum = 127,
    security_level = "high"
}

# Configurações de desenvolvimento
development = {
    debug = true,
    hot_reload = true,
    auto_format = true,
    auto_lint = true
}

# Configurações de produção
production = {
    debug = false,
    optimize = true,
    minify = true,
    compress = true
}