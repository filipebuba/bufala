"""
Rotas relacionadas ao meio ambiente e sustentabilidade
"""

from flask import Blueprint, request, jsonify, g
from datetime import datetime
import logging
import random

from utils.decorators import timeout_handler, require_json

logger = logging.getLogger(__name__)

environmental_bp = Blueprint('environmental', __name__)

@environmental_bp.route('/environment/diagnosis', methods=['POST'])
@timeout_handler
@require_json
def environmental_diagnosis():
    """Diagn√≥stico ambiental e ecol√≥gico"""
    try:
        logger.info("üåç Recebida requisi√ß√£o de diagn√≥stico ambiental")
        
        data = request.get_json()
        # Aceitar ambos 'prompt' e 'question' para compatibilidade
        prompt = data.get('prompt', data.get('question', '')).strip()
        language = data.get('language', 'pt-BR')
        environment_type = data.get('environment_type', 'geral')
        location = data.get('location', 'brasil')
        
        if not prompt:
            return jsonify({'error': 'Campo prompt √© obrigat√≥rio'}), 400
        
        # Gerar an√°lise ambiental
        response = g.gemma_service.generate_response(prompt, language, 'environmental')
        
        # Simula√ß√£o de dados ambientais
        environmental_data = {
            'air_quality': random.choice(['boa', 'moderada', 'sens√≠vel']),
            'water_quality': random.choice(['excelente', 'boa', 'aceit√°vel']),
            'soil_health': random.choice(['saud√°vel', 'degradado', 'recuperando']),
            'biodiversity_level': random.choice(['alto', 'm√©dio', 'baixo']),
            'carbon_footprint': random.choice(['baixo', 'moderado', 'alto'])
        }
        
        result = {
            'analysis': response,
            'environmental_data': environmental_data,
            'environment_type': environment_type,
            'location': location,
            'language': language,
            'recommendations': [
                'Implemente pr√°ticas de compostagem',
                'Use energia renov√°vel quando poss√≠vel',
                'Reduza o consumo de pl√°stico descart√°vel',
                'Plante esp√©cies nativas da regi√£o'
            ],
            'impact_score': random.randint(60, 90),
            'timestamp': datetime.now().isoformat(),
            'status': 'success'
        }
        
        logger.info("‚úÖ Diagn√≥stico ambiental gerado")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no diagn√≥stico ambiental: {e}")
        return jsonify({
            'error': 'Erro interno do servidor',
            'message': 'Servi√ßo ambiental temporariamente indispon√≠vel',
            'timestamp': datetime.now().isoformat(),
            'status': 'error'
        }), 500

@environmental_bp.route('/environment/recommendations', methods=['POST'])
@timeout_handler
@require_json
def environmental_recommendations():
    """Recomenda√ß√µes ambientais personalizadas"""
    try:
        logger.info("‚ôªÔ∏è Recebida requisi√ß√£o de recomenda√ß√µes ambientais")
        
        data = request.get_json()
        user_profile = data.get('user_profile', {})
        focus_area = data.get('focus_area', 'geral')
        language = data.get('language', 'pt-BR')
        
        # Gerar recomenda√ß√µes baseadas no perfil
        prompt = f"D√™ recomenda√ß√µes ambientais para {focus_area} considerando o perfil: {user_profile}"
        response = g.gemma_service.generate_response(prompt, language, 'environmental')
        
        # Recomenda√ß√µes categorizadas
        recommendations_by_category = {
            'energia': [
                'Use l√¢mpadas LED',
                'Desligue aparelhos da tomada',
                'Aproveite luz natural'
            ],
            'agua': [
                'Colete √°gua da chuva',
                'Repare vazamentos rapidamente',
                'Use torneiras com temporizador'
            ],
            'residuos': [
                'Separe lixo recicl√°vel',
                'Composte restos org√¢nicos',
                'Evite embalagens desnecess√°rias'
            ],
            'transporte': [
                'Use transporte p√∫blico',
                'Prefira bicicleta para dist√¢ncias curtas',
                'Compartilhe caronas'
            ]
        }
        
        result = {
            'personalized_advice': response,
            'focus_area': focus_area,
            'recommendations_by_category': recommendations_by_category,
            'quick_actions': [
                'Plante uma √°rvore hoje',
                'Reduza banhos em 2 minutos',
                'Use sacola reutiliz√°vel'
            ],
            'environmental_impact': {
                'co2_reduction': f"{random.randint(5, 20)}kg/m√™s",
                'water_savings': f"{random.randint(100, 500)}L/m√™s",
                'waste_reduction': f"{random.randint(2, 10)}kg/m√™s"
            },
            'timestamp': datetime.now().isoformat(),
            'status': 'success'
        }
        
        logger.info("‚úÖ Recomenda√ß√µes ambientais geradas")
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå Erro nas recomenda√ß√µes ambientais: {e}")
        return jsonify({
            'error': 'Erro interno do servidor',
            'message': 'Servi√ßo de recomenda√ß√µes ambientais temporariamente indispon√≠vel',
            'timestamp': datetime.now().isoformat(),
            'status': 'error'
        }), 500

@environmental_bp.route('/plant/audio-diagnosis', methods=['POST'])
@timeout_handler
@require_json
def plant_audio_diagnosis():
    """Diagn√≥stico de plantas via √°udio (preparado para IA multimodal)"""
    try:
        logger.info("üîä Recebida requisi√ß√£o de diagn√≥stico de planta por √°udio")
        
        data = request.get_json()
        audio_data = data.get('audio_data')
        plant_type = data.get('plant_type', 'desconhecida')
        user_id = data.get('user_id')
        
        if not audio_data:
            return jsonify({'error': 'Campo audio_data √© obrigat√≥rio'}), 400
        
        # Simula√ß√£o de diagn√≥stico (preparado para IA real)
        diagnosis = {
            'plant_type': plant_type,
            'disease_detected': random.choice(['M√≠ldio', 'Ferrugem', 'Podrid√£o', 'Saud√°vel']),
            'confidence': round(random.uniform(0.7, 0.95), 2),
            'recommendation': 'Isolar planta, aplicar tratamento espec√≠fico e monitorar evolu√ß√£o.',
            'audio_quality': random.choice(['excelente', 'boa', 'regular']),
            'treatment_steps': [
                'Remover partes afetadas',
                'Aplicar fungicida natural',
                'Melhorar ventila√ß√£o',
                'Monitorar por 7 dias'
            ],
            'prevention_tips': [
                'Evitar excesso de √°gua',
                'Manter boa circula√ß√£o de ar',
                'Inspecionar regularmente'
            ],
            'status': 'simulated',
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id
        }
        
        logger.info(f"‚úÖ Diagn√≥stico por √°udio simulado: {diagnosis['disease_detected']}")
        return jsonify(diagnosis)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no diagn√≥stico por √°udio: {e}")
        return jsonify({
            'error': 'Erro no processamento de √°udio',
            'message': 'Servi√ßo de diagn√≥stico por √°udio temporariamente indispon√≠vel',
            'timestamp': datetime.now().isoformat(),
            'status': 'error'
        }), 500
