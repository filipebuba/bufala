Com certeza\! É um prazer montar um exemplo com Flask e Ollama.

No entanto, há um ponto crucial que precisa ser esclarecido primeiro: o modelo **`gemma3n` (assim como `gemma3`, `llava`, `llama3.2-vision`) é um modelo de visão-linguagem, não um modelo de geração de imagens.**

Isso significa que ele é excelente para **analisar e entender imagens**, mas **não para criá-las do zero**. Ele pode descrever uma foto, responder perguntas sobre ela, ler texto contido nela, etc. Para *gerar* imagens, você usaria modelos de difusão, como o `stable-diffusion` ou `sdxl`, que também podem ser executados no Ollama.

Dado o seu interesse no `gemma3n`, vou criar um exemplo Flask que demonstra o seu verdadeiro poder: **uma aplicação web onde você faz o upload de uma imagem, escreve uma pergunta sobre ela, e o `gemma3n` a analisa e responde.**

Este é um caso de uso muito mais comum e poderoso para este tipo de modelo.

-----

### Exemplo Flask: Analisador de Imagens com Ollama e Gemma 3n

Este projeto criará uma página web simples com um formulário para enviar uma imagem e uma pergunta. O backend em Flask receberá esses dados, os enviará para o modelo `gemma3n` rodando no Ollama e exibirá a resposta.

#### Pré-requisitos

1.  **Ollama instalado e rodando:** Certifique-se de que o serviço do Ollama está ativo.
2.  **Modelo `gemma3n` baixado:** Se ainda não o fez, execute no terminal:
    ```bash
    ollama pull gemma3n:e4b
    ```
    *(Estou usando a tag `e4b` como exemplo de uma variante eficiente, mas você pode usar `gemma3n` se preferir).*
3.  **Python e Flask instalados:**
    ```bash
    pip install Flask ollama
    ```

#### Estrutura do Projeto

Crie uma pasta para o seu projeto e organize os arquivos da seguinte forma:

```
/flask_ollama_vision/
|-- app.py
|-- /templates/
|   |-- index.html
|   |-- resultado.html
```

#### Passo 1: O Código do Backend (`app.py`)

Este é o coração da nossa aplicação Flask. Ele lida com as requisições web, processa os dados do formulário e se comunica com a API do Ollama.

```python
# app.py

from flask import Flask, request, render_template, redirect, url_for
import ollama
import base64

app = Flask(__name__)

# Configuração do cliente Ollama
# Certifique-se de que o serviço Ollama está rodando localmente
client = ollama.Client()

@app.route('/', methods=['GET'])
def index():
    """Renderiza a página inicial com o formulário de upload."""
    return render_template('index.html')

@app.route('/analisar', methods=['POST'])
def analisar_imagem():
    """Recebe a imagem e o prompt, envia para o Ollama e mostra o resultado."""
    
    # Validação do formulário
    if 'imagem' not in request.files or not request.files['imagem'].filename:
        return "Nenhuma imagem foi enviada.", 400
    
    if 'prompt' not in request.form or not request.form['prompt']:
        return "Nenhum prompt foi fornecido.", 400

    imagem_file = request.files['imagem']
    prompt_usuario = request.form['prompt']
    
    # Lê a imagem e a codifica para ser enviada
    # O SDK Python do Ollama pode lidar diretamente com os bytes da imagem
    imagem_bytes = imagem_file.read()
    
    try:
        # Chama o modelo gemma3n com o prompt e a imagem
        response = client.chat(
            model='gemma3n:e4b',  # Ou o modelo que você preferir
            messages=[
                {
                    'role': 'user',
                    'content': prompt_usuario,
                    'images': [imagem_bytes], # A imagem é passada aqui
                }
            ]
        )
        
        resultado_analise = response['message']['content']

        # Codifica a imagem em base64 para exibi-la na página de resultado
        imagem_base64 = base64.b64encode(imagem_bytes).decode('utf-8')

        return render_template(
            'resultado.html', 
            prompt=prompt_usuario, 
            resultado=resultado_analise,
            imagem_data=imagem_base64
        )

    except Exception as e:
        # Lida com possíveis erros de conexão com o Ollama
        return f"Ocorreu um erro ao comunicar com o Ollama: {e}", 500

if __name__ == '__main__':
    app.run(debug=True, port=5001)

```

#### Passo 2: O Frontend (`templates/index.html`)

Esta é a página inicial com o formulário para o usuário.

```html
<!doctype html>
<html lang="pt-br">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Analisador de Imagens com Gemma 3n</title>
    <style>
        body { font-family: sans-serif; max-width: 800px; margin: auto; padding: 20px; background-color: #f4f4f9; color: #333; }
        .container { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #444; }
        label { display: block; margin-top: 15px; font-weight: bold; }
        input[type="text"], input[type="file"] { width: 100%; padding: 10px; margin-top: 5px; border: 1px solid #ccc; border-radius: 4px; }
        input[type="submit"] { background-color: #007bff; color: white; padding: 12px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; margin-top: 20px; }
        input[type="submit"]:hover { background-color: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Analisador de Imagens com Ollama + Gemma 3n</h1>
        <p>Faça o upload de uma imagem e uma pergunta sobre ela.</p>
        <form action="{{ url_for('analisar_imagem') }}" method="post" enctype="multipart/form-data">
            <label for="imagem">Escolha uma imagem:</label>
            <input type="file" id="imagem" name="imagem" accept="image/*" required>
            
            <label for="prompt">Sua pergunta:</label>
            <input type="text" id="prompt" name="prompt" placeholder="Ex: Que animal é este? ou Descreva a cena." required>
            
            <input type="submit" value="Analisar Imagem">
        </form>
    </div>
</body>
</html>
```

#### Passo 3: A Página de Resultados (`templates/resultado.html`)

Esta página exibirá a imagem enviada, a pergunta e a resposta do modelo.

```html
<!doctype html>
<html lang="pt-br">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Resultado da Análise</title>
    <style>
        body { font-family: sans-serif; max-width: 800px; margin: auto; padding: 20px; background-color: #f4f4f9; color: #333; }
        .container { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1, h2 { color: #444; border-bottom: 2px solid #eee; padding-bottom: 10px; }
        img { max-width: 100%; height: auto; border-radius: 4px; margin-top: 10px; }
        .resposta { background-color: #e9f5ff; border-left: 5px solid #007bff; padding: 15px; margin-top: 15px; white-space: pre-wrap; }
        a { display: inline-block; margin-top: 20px; text-decoration: none; background-color: #6c757d; color: white; padding: 10px 15px; border-radius: 4px; }
        a:hover { background-color: #5a6268; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Resultado da Análise</h1>
        
        <h2>Sua Imagem e Pergunta:</h2>
        <p><strong>Pergunta:</strong> {{ prompt }}</p>
        <img src="data:image/jpeg;base64,{{ imagem_data }}" alt="Imagem enviada">
        
        <h2>Resposta do Gemma 3n:</h2>
        <div class="resposta">
            <p>{{ resultado }}</p>
        </div>
        
        <a href="{{ url_for('index') }}">Analisar Outra Imagem</a>
    </div>
</body>
</html>
```

#### Como Executar

1.  Certifique-se de que o serviço do Ollama está rodando no seu computador.
2.  Abra um terminal na pasta do projeto (`/flask_ollama_vision/`).
3.  Execute o arquivo `app.py`:
    ```bash
    python app.py
    ```
4.  Abra seu navegador e acesse `http://127.0.0.1:5001`.

Você verá o formulário, pronto para testar o poder de visão do `gemma3n` com a simplicidade do Flask\!