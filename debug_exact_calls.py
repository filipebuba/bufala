#!/usr/bin/env python3
"""
Teste simulando exatamente os erros que aparecem nos logs
"""

import requests
import json

def test_exact_flutter_calls():
    """Simula exatamente o que o Flutter est√° enviando baseado nos logs de erro"""
    
    print("üîç Simulando exatamente as chamadas que est√£o falhando...\n")
    
    # Health check primeiro
    print("1Ô∏è‚É£ Health check...")
    try:
        response = requests.get("http://localhost:5000/health", timeout=10)
        print(f"‚úÖ Health: {response.status_code}")
    except:
        print("‚ùå Backend offline")
        return
    
    # Test 1: Emerg√™ncia (este est√° falhando nos logs)
    print("\n2Ô∏è‚É£ Emerg√™ncia (dados que est√£o falhando)...")
    emergency_data = {
        'symptoms': "dor no peito e falta de ar",
        'language': 'pt-BR',
        'type': 'medical_question',
    }
    
    try:
        response = requests.post("http://localhost:5000/emergency/analyze", json=emergency_data, timeout=30)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 400:
            error = response.json()
            print(f"‚ùå Erro 400: {error.get('message', 'N/A')}")
        elif response.status_code == 200:
            print("‚úÖ Emerg√™ncia OK")
        else:
            print(f"‚ö†Ô∏è Status inesperado: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Test 2: Educa√ß√£o (este est√° falhando nos logs)
    print("\n3Ô∏è‚É£ Educa√ß√£o (dados que est√£o falhando)...")
    education_data = {
        'topic': "matem√°tica b√°sica",
        'language': 'pt-BR',
        'level': 'b√°sico',
        'duration': 30,
    }
    
    try:
        response = requests.post("http://localhost:5000/education/generate", json=education_data, timeout=30)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 400:
            error = response.json()
            print(f"‚ùå Erro 400: {error.get('message', 'N/A')}")
        elif response.status_code == 200:
            print("‚úÖ Educa√ß√£o OK")
        else:
            print(f"‚ö†Ô∏è Status inesperado: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Test 3: Teste com diferentes codifica√ß√µes
    print("\n4Ô∏è‚É£ Testando diferentes codifica√ß√µes...")
    
    # Teste com caracteres especiais diferentes
    test_cases = [
        ('pt-BR', 'b√°sico'),
        ('pt-BR', 'basico'),  # sem acento
        ('pt', 'b√°sico'),
        ('pt', 'basico'),
    ]
    
    for lang, level in test_cases:
        print(f"\n   Testando: language='{lang}', level='{level}'")
        test_data = {
            'topic': "teste",
            'language': lang,
            'level': level,
            'duration': 30,
        }
        
        try:
            response = requests.post("http://localhost:5000/education/generate", json=test_data, timeout=10)
            if response.status_code == 200:
                print(f"   ‚úÖ OK")
            elif response.status_code == 400:
                error = response.json()
                print(f"   ‚ùå 400: {error.get('message', 'N/A')}")
            else:
                print(f"   ‚ö†Ô∏è {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")

if __name__ == "__main__":
    test_exact_flutter_calls()
